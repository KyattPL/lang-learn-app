{"version":3,"sources":["components/AddCardAbstractForm.jsx","components/AddCard.jsx"],"names":["AddCardAbstractForm","result","langSelected","grammarSelected","AddCard","options","langs","lang","index","useState","input","setInput","setLangSelected","setGrammarSelected","handleGrammarSelect","grammar","length","filter","match","Dropdown","Item","disabled","map","onClick","indexSelected","eventKey","CustomToggle","React","forwardRef","ref","children","Button","href","e","preventDefault","CustomMenu","style","className","labeledBy","FormControl","autoFocus","placeholder","onChange","target","value","Container","fluid","Row","Col","xs","InputGroup","Toggle","as","id","Menu"],"mappings":"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","file":"static/js/6.20e27a72.chunk.js","sourcesContent":["// import DutchAddAbstract from './dutch/DutchAddAbstract.jxs';\n// import NorwegianAddAbstract from './norwegian/NorwegianAddAbstract.jsx';\n\nfunction AddCardAbstractForm({langSelected, grammarSelected}) {\n\n    let result;\n\n    switch(langSelected) {\n        case \"Dutch\": result = <div>Dutch here</div>; break;\n        case \"Norwegian\": result = <div>Norwegian here</div>; break;\n        default: result = <div>NULL</div>; break;\n    }\n\n    return (\n        <>\n        { result }\n        </>\n    )\n}\n\nexport default AddCardAbstractForm;","import Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Button from 'react-bootstrap/Button';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport { useState } from 'react';\nimport React from 'react';\n\nimport AddCardAbstractForm from './AddCardAbstractForm.jsx';\nimport '../styles/DropdownLiveSearch.css';\n\nfunction AddCard() {\n\n    let langs = [{ lang: \"Dutch\", index: 1 }, { lang: \"Norwegian\", index: 2 }];\n\n    const [input, setInput] = useState(\"\");\n    const [langSelected, setLangSelected] = useState(\"\");\n    const [grammarSelected, setGrammarSelected] = useState(\"\");\n\n    const handleLangSelect = (indexSelected) => {\n        setLangSelected(langs[indexSelected - 1].lang);\n    }\n\n    const handleGrammarSelect = (grammar) => {\n        setGrammarSelected(grammar);\n    }\n\n    if (input.length > 0) {\n        langs = langs.filter((lang) => {\n            return lang.lang.match(input);\n        })\n    }\n\n    let options;\n    if (langs.length === 0) {\n        options = <Dropdown.Item disabled>No matches</Dropdown.Item>;\n    } else {\n        options = langs.map((lang) => <Dropdown.Item key={lang.index} onClick={() => handleLangSelect(lang.index)} eventKey={lang.index}>{lang.lang}</Dropdown.Item>);\n    }\n\n    const CustomToggle = React.forwardRef(({ children, onClick }, ref) => (\n        <Button href=\"\" ref={ref} onClick={(e) => { e.preventDefault(); onClick(e); }}>\n            {children}\n            &#x25bc;\n        </Button>\n    ));\n\n    const CustomMenu = React.forwardRef(\n        ({ children, style, className, 'aria-labelledby': labeledBy }, ref) => {\n\n            return (\n                <div ref={ref} style={style} className={className} aria-labelledby={labeledBy}>\n                    <FormControl\n                        autoFocus\n                        className=\"mx-3 my-2 w-auto\"\n                        placeholder=\"Search...\"\n                        onChange={(e) => setInput(e.target.value)}\n                        value={input} />\n                    <ul className=\"list-unstyled\">\n                        {children}\n                    </ul>\n                </div>\n            );\n        },\n    );\n\n    return (\n        <Container fluid>\n            <Row>\n                <Col>\n                </Col>\n                <Col xs={10}>\n                    <InputGroup>\n                        <Dropdown>\n                            <Dropdown.Toggle as={CustomToggle} id=\"dropdownLanguageToggle\">\n                                {langSelected === '' ? \"Select language\" : langSelected}\n                            </Dropdown.Toggle>\n                            <Dropdown.Menu className=\"dropdownTransform\" as={CustomMenu}>\n                                {options}\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </InputGroup>\n                    <InputGroup>\n                        <Dropdown>\n                            <Dropdown.Toggle>\n                                {grammarSelected === '' ? \"Part of speech\" : grammarSelected}\n                            </Dropdown.Toggle>\n                            <Dropdown.Menu>\n                                <Dropdown.Item onClick={() => handleGrammarSelect(\"Adjective\")}>Adjective</Dropdown.Item>\n                                <Dropdown.Item onClick={() => handleGrammarSelect(\"Noun\")}>Noun</Dropdown.Item>\n                                <Dropdown.Item onClick={() => handleGrammarSelect(\"Verb\")}>Verb</Dropdown.Item>\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </InputGroup>\n                </Col>\n                <Col>\n                </Col>\n            </Row>\n            <Row>\n                <AddCardAbstractForm langSelected={langSelected} grammarSelected={grammarSelected}/>\n            </Row>\n        </Container >\n    )\n}\n\nexport default AddCard;"],"sourceRoot":""}