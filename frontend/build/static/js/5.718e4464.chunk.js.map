{"version":3,"sources":["utils/fetchAddCard.js","utils/dashOnEmptyInput.js","components/norwegian/NorwegianAddAdjective.jsx","components/norwegian/NorwegianAddNoun.jsx","components/norwegian/NorwegianAddVerb.jsx","components/norwegian/NorwegianAddAbstract.jsx","components/AddCardAbstractForm.jsx","components/AddCardModal.jsx","components/AddCard.jsx"],"names":["fetchAddCard","lang","cardObj","fetch","method","headers","body","JSON","stringify","then","response","text","dashOnEmptyInput","str","current","value","NorwegianAddAdjective","wordSetter","showModal","grammarInputNames","grammarInputLen","length","useState","validated","setValidated","wordInput","useRef","pronInput","meanInput","elRefs","setElRefs","useEffect","Array","fill","map","_","i","createRef","clearForm","Form","onSubmit","event","preventDefault","stopPropagation","currentTarget","checkValidity","data","console","error","startsWith","catch","noValidate","Group","as","Row","className","Label","column","sm","Col","Control","ref","required","type","placeholder","name","index","Button","variant","NorwegianAddNoun","checkedCountable","setCheckedCountable","genderInput","onClick","style","width","NorwegianAddVerb","NorwegianAddAbstract","result","speech","AddCardAbstractForm","langSelected","grammarSelected","AddCardModal","show","addedWord","handleClose","Modal","onHide","Header","closeButton","Title","Body","Footer","AddCard","selectLang","selectSpeech","currLang","setCurrLang","currSpeech","setCurrSpeech","currWord","setCurrWord","shouldShowModal","setShouldShowModal","Container","fluid","xs","InputGroup","Prepend","Text","onChange","defaultValue"],"mappings":"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","file":"static/js/5.718e4464.chunk.js","sourcesContent":["export const fetchAddCard = (lang, cardObj) => {\n    return fetch(\"/addCard\", {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ lang: lang, cardObj: cardObj })\n    }).then(response => response.text());\n};","export const dashOnEmptyInput = (str) => {\n    return str.current.value === '' ? '-' : str.current.value\n};","import Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\n\nimport '../../styles/AddCard.css';\nimport { useState, createRef, useRef, useEffect } from 'react';\nimport { fetchAddCard } from '../../utils/fetchAddCard';\nimport { dashOnEmptyInput } from '../../utils/dashOnEmptyInput';\n\nfunction NorwegianAddAdjective({ wordSetter, showModal }) {\n\n    const grammarInputNames = [\"Masculine Singular Indefinite\", \"Masculine Singular Definite\",\n        \"Masculine Plural Indefinite\", \"Masculine Plural Definite\", \"Feminine Singular Indefinite\",\n        \"Feminine Singular Definite\", \"Feminine Plural Indefinite\", \"Feminine Plural Definite\",\n        \"Neuter Singular Indefinite\", \"Neuter Singular Definite\", \"Neuter Plural Indefinite\",\n        \"Neuter Plural Definite\", \"Comparative\", \"Indefinite Superlative\", \"Definite Superlative\"];\n\n    const grammarInputLen = grammarInputNames.length;\n    const [validated, setValidated] = useState(false);\n\n    const wordInput = useRef(null);\n    const pronInput = useRef(null);\n    const meanInput = useRef(null);\n\n    const [elRefs, setElRefs] = useState([]);\n\n    useEffect(() => {\n      setElRefs(elRefs => (\n        Array(grammarInputLen).fill().map((_, i) => elRefs[i] || createRef())\n      ));\n    }, [grammarInputLen]);\n\n    const addCard = (event) => {\n        event.preventDefault();\n        event.stopPropagation();\n\n        if (event.currentTarget.checkValidity() === true) {\n            setValidated(false);\n            wordSetter(wordInput.current.value);\n            const cardObj = {\n                \"word\": wordInput.current.value,\n                \"translation\": [\n                    {\n                        \"type\": \"adjective\",\n                        \"pronounciation\": pronInput.current.value,\n                        \"meaning\": meanInput.current.value,\n                        \"grammarAdj\": {\n                            \"masculineSinIndef\": dashOnEmptyInput(elRefs[0]),\n                            \"masculineSinDef\": dashOnEmptyInput(elRefs[1]),\n                            \"masculinePlIndef\": dashOnEmptyInput(elRefs[2]),\n                            \"masculinePlDef\": dashOnEmptyInput(elRefs[3]),\n                            \"feminineSinIndef\": dashOnEmptyInput(elRefs[4]),\n                            \"feminineSinDef\": dashOnEmptyInput(elRefs[5]),\n                            \"femininePlIndef\": dashOnEmptyInput(elRefs[6]),\n                            \"femininePlDef\": dashOnEmptyInput(elRefs[7]),\n                            \"neuterSinIndef\": dashOnEmptyInput(elRefs[8]),\n                            \"neuterSinDef\": dashOnEmptyInput(elRefs[9]),\n                            \"neuterPlIndef\": dashOnEmptyInput(elRefs[10]),\n                            \"neuterPlDef\": dashOnEmptyInput(elRefs[11]),\n                            \"comparative\": dashOnEmptyInput(elRefs[12]),\n                            \"indefSuperlative\": dashOnEmptyInput(elRefs[13]),\n                            \"defSuperlative\": dashOnEmptyInput(elRefs[14])\n                        }\n                    }\n                ]\n            }\n            fetchAddCard(\"Norwegian\", cardObj).then(data => {\n                if (data === \"DB_ERR\" || data === \"MISSING_LANG_PASSED\" || data === \"MISSING_WORD_PASSED\") {\n                    console.error(data);\n                } else if (data === \"Internal Server Error\") {\n                    console.error(\"There was a problem with saving your card to the database\");\n                } else if (data.startsWith(\"Proxy error:\")){\n                    console.error(data);\n                } else  {\n                    clearForm();\n                    showModal();\n                }\n            }).catch((error) => {\n                console.error(\"Error: \", error);\n            })\n        } else {\n            setValidated(true);\n        }\n    };\n\n    const clearForm = () => {\n        for (let i=0; i < grammarInputLen; i++) {\n            elRefs[i].current.value = '';\n        }\n    }\n\n    return (\n        <Form onSubmit={addCard} noValidate validated={validated}>\n            <Form.Group as={Row} className=\"mb-2\">\n                <Form.Label column sm=\"2\">\n                    Word\n                </Form.Label>\n                <Col sm={10}>\n                    <Form.Control ref={wordInput} required type=\"text\" placeholder=\"Type here\" />\n                </Col>\n            </Form.Group>\n            <Form.Group as={Row} className=\"mb-2\">\n                <Form.Label column sm=\"2\">\n                    Pronounciation\n                </Form.Label>\n                <Col sm={10}>\n                    <Form.Control ref={pronInput} required type=\"text\" placeholder=\"Type here\" />\n                </Col>\n            </Form.Group>\n            <Form.Group as={Row} className=\"mb-2\">\n                <Form.Label column sm=\"2\">\n                    Meaning\n                </Form.Label>\n                <Col sm={10}>\n                    <Form.Control ref={meanInput} required type=\"text\" placeholder=\"Type here\" />\n                </Col>\n            </Form.Group>\n            {\n                grammarInputNames.map((name, index) => \n                    <Form.Group as={Row} className=\"mb-2\" key={name}>\n                        <Form.Label column sm=\"2\">\n                            {name}\n                        </Form.Label>\n                        <Col sm={10}>\n                            <Form.Control ref={elRefs[index]} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\"/>\n                        </Col>\n                    </Form.Group>)\n            }\n            <Button variant=\"success\" type=\"submit\">\n                Add Card\n            </Button>\n        </Form>\n    );\n}\n\nexport default NorwegianAddAdjective;","import Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\n\nimport '../../styles/AddCard.css';\nimport { useState, useRef, createRef, useEffect } from 'react';\nimport { fetchAddCard } from '../../utils/fetchAddCard';\nimport { dashOnEmptyInput } from '../../utils/dashOnEmptyInput';\n\nfunction NorwegianAddNoun({ wordSetter, showModal }) {\n\n    const grammarInputNames = [\"Singular Indefinite\", \"Singular Definite\",\n        \"Plural Indefinite\", \"Plural Definite\"];\n\n    const grammarInputLen = grammarInputNames.length;\n\n    const [validated, setValidated] = useState(false);\n    const [checkedCountable, setCheckedCountable] = useState(false);\n\n    const wordInput = useRef(null);\n    const pronInput = useRef(null);\n    const meanInput = useRef(null);\n    const genderInput = useRef(null);\n\n    const [elRefs, setElRefs] = useState([]);\n\n    useEffect(() => {\n        setElRefs(elRefs => (\n          Array(grammarInputLen).fill().map((_, i) => elRefs[i] || createRef())\n        ));\n      }, [grammarInputLen]);\n\n    const addCard = (event) => {\n        event.preventDefault();\n        event.stopPropagation();\n\n        if (event.currentTarget.checkValidity() === true) {\n            setValidated(false);\n            wordSetter(wordInput.current.value);\n            const cardObj = {\n                \"word\": wordInput.current.value,\n                \"translation\": [\n                    {\n                        \"type\": \"noun\",\n                        \"pronounciation\": pronInput.current.value,\n                        \"meaning\": meanInput.current.value,\n                        \"grammarNoun\": {\n                            \"countable\": checkedCountable,\n                            \"gender\": genderInput.current.value,\n                            \"singularIndefinite\": dashOnEmptyInput(elRefs[1]),\n                            \"singularDefinite\": dashOnEmptyInput(elRefs[2]),\n                            \"pluralIndefinite\": dashOnEmptyInput(elRefs[3]),\n                            \"pluralDefinite\": dashOnEmptyInput(elRefs[4])\n                        }\n                    }\n                ]\n            }\n            fetchAddCard(\"Norwegian\", cardObj).then(data => {\n                if (data === \"DB_ERR\" || data === \"MISSING_LANG_PASSED\" || data === \"MISSING_WORD_PASSED\") {\n                    console.error(data);\n                } else if (data === \"Internal Server Error\") {\n                    console.error(\"There was a problem with saving your card to the database\");\n                } else if (data.startsWith(\"Proxy error:\")) {\n                    console.error(data);\n                } else  {\n                    clearForm();\n                    showModal();\n                }\n            }).catch((error) => {\n                console.error(\"Error: \", error);\n            })\n        } else {\n            setValidated(true);\n        }\n    };\n\n    const clearForm = () => {\n        for (let i=0; i < grammarInputLen; i++) {\n            elRefs[i].current.value = '';\n        }\n    }\n\n    return (\n        <Form onSubmit={addCard} noValidate validated={validated}>\n            <Form.Group as={Row} className=\"mb-2\">\n                <Form.Label column sm=\"2\">\n                    Word\n                </Form.Label>\n                <Col sm={10}>\n                    <Form.Control ref={wordInput} required type=\"text\" placeholder=\"Type here\" />\n                </Col>\n            </Form.Group>\n            <Form.Group as={Row} className=\"mb-2\">\n                <Form.Label column sm=\"2\">\n                    Pronounciation\n                </Form.Label>\n                <Col sm={10}>\n                    <Form.Control ref={pronInput} required type=\"text\" placeholder=\"Type here\" />\n                </Col>\n            </Form.Group>\n            <Form.Group as={Row} className=\"mb-2\">\n                <Form.Label column sm=\"2\">\n                    Meaning\n                </Form.Label>\n                <Col sm={10}>\n                    <Form.Control ref={meanInput} required type=\"text\" placeholder=\"Type here\" />\n                </Col>\n            </Form.Group>\n            <Form.Group as={Row} className=\"mb-2\">\n                <Form.Label column sm=\"2\">\n                    Countable\n                </Form.Label>\n                <Col sm={10}>\n                    <Form.Control onClick={() => setCheckedCountable(!checkedCountable)} style={{ width: \"auto\" }} type=\"checkbox\" />\n                </Col>\n            </Form.Group>\n            <Form.Group as={Row} className=\"mb-2\">\n                <Form.Label column sm=\"2\">\n                    Gender\n                </Form.Label>\n                <Col sm={10}>\n                    <Form.Control ref={genderInput} required as=\"select\">\n                        <option value=\"masculine\">Masculine</option>\n                        <option value=\"feminine\">Feminine</option>\n                        <option value=\"neuter\">Neuter</option>\n                    </Form.Control>\n                </Col>\n            </Form.Group>\n            {\n                grammarInputNames.map((name, index) =>\n                    <Form.Group key={name} as={Row} className=\"mb-2\">\n                        <Form.Label column sm=\"2\">\n                            {name}\n                        </Form.Label>\n                        <Col sm={10}>\n                            <Form.Control ref={elRefs[index]} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\n                        </Col>\n                    </Form.Group>)\n            }\n            <Button variant=\"success\" type=\"submit\">\n                Add Card\n            </Button>\n        </Form>\n    );\n}\n\nexport default NorwegianAddNoun;","import Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\n\nimport '../../styles/AddCard.css';\nimport { useState, useRef, createRef, useEffect } from 'react';\nimport { fetchAddCard } from '../../utils/fetchAddCard';\nimport { dashOnEmptyInput } from '../../utils/dashOnEmptyInput';\n\nfunction NorwegianAddVerb({ wordSetter, showModal }) {\n\n    const grammarInputNames = [\"Infinitive\", \"Present\", \"Past\", \"Future\", \"Conditional\",\n        \"Imperative\", \"Present Perfect\", \"Past Perfect\", \"Future Perfect\", \"Conditional Perfect\"];\n\n    const grammarInputLen = grammarInputNames.length;\n\n    const [validated, setValidated] = useState(false);\n\n    const wordInput = useRef(null);\n    const pronInput = useRef(null);\n    const meanInput = useRef(null);\n\n    const [elRefs, setElRefs] = useState([]);\n\n    useEffect(() => {\n        setElRefs(elRefs => (\n          Array(grammarInputLen).fill().map((_, i) => elRefs[i] || createRef())\n        ));\n      }, [grammarInputLen]);\n\n    const addCard = (event) => {\n        event.preventDefault();\n        event.stopPropagation();\n\n        if (event.currentTarget.checkValidity() === true) {\n            setValidated(false);\n            wordSetter(wordInput.current.value);\n            const cardObj = {\n                \"word\": wordInput.current.value,\n                \"translation\": [\n                    {\n                        \"type\": \"verb\",\n                        \"pronounciation\": pronInput.current.value,\n                        \"meaning\": meanInput.current.value,\n                        \"grammarVerb\": {\n                            \"infinitive\": dashOnEmptyInput(elRefs[0]),\n                            \"present\": dashOnEmptyInput(elRefs[1]),\n                            \"past\": dashOnEmptyInput(elRefs[2]),\n                            \"future\": dashOnEmptyInput(elRefs[3]),\n                            \"conditional\": dashOnEmptyInput(elRefs[4]),\n                            \"imperative\": dashOnEmptyInput(elRefs[5]),\n                            \"presentPerfect\": dashOnEmptyInput(elRefs[6]),\n                            \"pastPerfect\": dashOnEmptyInput(elRefs[7]),\n                            \"futurePerfect\": dashOnEmptyInput(elRefs[8]),\n                            \"conditionalPerfect\": dashOnEmptyInput(elRefs[9])\n                        }\n                    }\n                ]\n            }\n            fetchAddCard(\"Norwegian\", cardObj).then(data => {\n                if (data === \"DB_ERR\" || data === \"MISSING_LANG_PASSED\" || data === \"MISSING_WORD_PASSED\") {\n                    console.error(data);\n                } else if (data === \"Internal Server Error\") {\n                    console.error(\"There was a problem with saving your card to the database\");\n                } else if (data.startsWith(\"Proxy error:\")){\n                    console.error(data);\n                } else  {\n                    clearForm();\n                    showModal();\n                }\n            }).catch((error) => {\n                console.error(\"Error: \", error);\n            })\n        } else {\n            setValidated(true);\n        }\n    };\n\n    const clearForm = () => {\n        for (let i=0; i < grammarInputLen; i++) {\n            elRefs[i].current.value = '';\n        }\n    }\n\n    return (\n        <Form onSubmit={addCard} noValidate validated={validated}>\n            <Form.Group as={Row} className=\"mb-2\">\n                <Form.Label column sm=\"2\">\n                    Word\n                </Form.Label>\n                <Col sm={10}>\n                    <Form.Control ref={wordInput} required type=\"text\" placeholder=\"Type here\" />\n                </Col>\n            </Form.Group>\n            <Form.Group as={Row} className=\"mb-2\">\n                <Form.Label column sm=\"2\">\n                    Pronounciation\n                </Form.Label>\n                <Col sm={10}>\n                    <Form.Control ref={pronInput} required type=\"text\" placeholder=\"Type here\" />\n                </Col>\n            </Form.Group>\n            <Form.Group as={Row} className=\"mb-2\">\n                <Form.Label column sm=\"2\">\n                    Meaning\n                </Form.Label>\n                <Col sm={10}>\n                    <Form.Control ref={meanInput} required type=\"text\" placeholder=\"Type here\" />\n                </Col>\n            </Form.Group>\n            {\n                grammarInputNames.map((name, index) => \n                    <Form.Group key={name} as={Row} className=\"mb-2\">\n                        <Form.Label column sm=\"2\">\n                            {name}\n                        </Form.Label>\n                        <Col sm={10}>\n                            <Form.Control ref={elRefs[index]} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\n                        </Col>\n                    </Form.Group>)\n            }\n            <Button variant=\"success\" type=\"submit\">\n                Add Card\n            </Button>\n        </Form>\n    );\n}\n\nexport default NorwegianAddVerb;","import NorwegianAddAdjective from './NorwegianAddAdjective.jsx'\nimport NorwegianAddNoun from './NorwegianAddNoun.jsx'\nimport NorwegianAddVerb from './NorwegianAddVerb.jsx'\n\nfunction NorwegianAddAbstract({speech, wordSetter, showModal}) {\n\n    let result;\n\n    switch (speech) {\n        case \"Adjective\": result = <NorwegianAddAdjective showModal={showModal} wordSetter={wordSetter} />; break;\n        case \"Noun\": result = <NorwegianAddNoun showModal={showModal} wordSetter={wordSetter}/>; break;\n        case \"Verb\": result = <NorwegianAddVerb showModal={showModal} wordSetter={wordSetter}/>; break;\n        default: result = <div>NULL</div>; break;\n    }\n\n    return (\n        <>\n            { result }\n        </>\n    )\n}\n\nexport default NorwegianAddAbstract;","// import DutchAddAbstract from './dutch/DutchAddAbstract.jxs';\nimport NorwegianAddAbstract from './norwegian/NorwegianAddAbstract.jsx';\n\nfunction AddCardAbstractForm({langSelected, grammarSelected, wordSetter, showModal}) {\n\n    let result;\n\n    switch(langSelected) {\n        case \"Dutch\": result = <div>Dutch here</div>; break;\n        case \"Norwegian\": result = <NorwegianAddAbstract showModal={showModal} wordSetter={wordSetter} speech={grammarSelected}/>; break;\n        default: result = <div>NULL</div>; break;\n    }\n\n    return (\n        <>\n        { result }\n        </>\n    )\n}\n\nexport default AddCardAbstractForm;","import Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\n\nfunction AddCardModal({show, addedWord, handleClose}) {\n    return (\n        <Modal show={show} onHide={handleClose}>\n            <Modal.Header closeButton>\n                <Modal.Title>Added to the dictionary</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>The word \"{addedWord}\" has been added to the dictionary</Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"success\" onClick={handleClose} data-testid=\"testCloseAddModal\">\n                    Close\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\nexport default AddCardModal;","import Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport { useRef, useState } from 'react';\nimport React from 'react';\n\nimport AddCardAbstractForm from './AddCardAbstractForm.jsx';\nimport AddCardModal from './AddCardModal.jsx';\nimport '../styles/DropdownLiveSearch.css';\n\nfunction AddCard() {\n\n    let langs = [{ lang: \"Dutch\", index: 1 }, { lang: \"Norwegian\", index: 2 }];\n\n    const selectLang = useRef(null);\n    const selectSpeech = useRef(null);\n\n    const [currLang, setCurrLang] = useState(\"Dutch\");\n    const [currSpeech, setCurrSpeech] = useState(\"Adjective\");\n    const [currWord, setCurrWord] = useState(null);\n    const [shouldShowModal, setShouldShowModal] = useState(false);\n\n    const updateLang = () => {\n        setCurrLang(selectLang.current.value);\n    }\n\n    const updateSpeech = () => {\n        setCurrSpeech(selectSpeech.current.value);\n    }\n\n    const showModal = () => {\n        setShouldShowModal(true);\n    }\n\n    return (\n        <Container fluid>\n            <Row>\n                <Col>\n                </Col>\n                <Col xs={10}>\n                    <InputGroup className=\"mt-2\">\n                        <InputGroup.Prepend>\n                            <InputGroup.Text>Language:</InputGroup.Text>\n                        </InputGroup.Prepend>\n                        <Form.Control className=\"langDropdown\" onChange={() => updateLang()} ref={selectLang} as=\"select\" defaultValue=\"Dutch\">\n                            {langs.map((lang) => <option key={lang.index}>{lang.lang}</option>)}\n                        </Form.Control>\n                        <InputGroup.Prepend>\n                            <InputGroup.Text>Part of speech:</InputGroup.Text>\n                        </InputGroup.Prepend>\n                        <Form.Control className=\"langDropdown\" onChange={() => updateSpeech()} ref={selectSpeech} as=\"select\" defaultValue=\"Adjective\">\n                            <option>Adjective</option>\n                            <option>Noun</option>\n                            <option>Verb</option>\n                        </Form.Control>\n                    </InputGroup>\n                </Col>\n                <Col>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                </Col>\n                <Col xs={10} className=\"mt-2\">\n                    <AddCardAbstractForm showModal={showModal} wordSetter={setCurrWord} langSelected={currLang} grammarSelected={currSpeech}/>\n                </Col>\n                <Col>\n                </Col>\n            </Row>\n            <AddCardModal show={shouldShowModal} addedWord={currWord} handleClose={() => setShouldShowModal(false)}/>\n        </Container >\n    )\n}\n\nexport default AddCard;"],"sourceRoot":""}