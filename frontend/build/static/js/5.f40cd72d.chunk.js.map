{"version":3,"sources":["components/norwegian/utilsNorwegian.js","components/norwegian/AdjGrammarNorwegian.jsx","components/norwegian/NounGrammarNorwegian.jsx","components/norwegian/VerbGrammarNorwegian.jsx","components/norwegian/small/SmAdjGrammarNorwegian.jsx","components/norwegian/small/SmNounGrammarNorwegian.jsx","components/norwegian/small/SmVerbGrammarNorwegian.jsx","components/norwegian/NorwegianCard.jsx","components/dutch/DutchCard.jsx","components/Flashcard.jsx","components/TranslationGroup.jsx","components/SearchCardModal.jsx","components/SearchCard.jsx","utils/fetchGetCard.js"],"names":["checkAdjProperties","grammarObj","origKeys","Object","keys","sort","testKeys","JSON","stringify","checkNounProperties","checkVerbProperties","AdjGrammarNorwegian","TypeError","Table","bordered","hover","size","className","colSpan","masculineSinIndef","masculineSinDef","masculinePlIndef","masculinePlDef","feminineSinIndef","feminineSinDef","femininePlIndef","femininePlDef","neuterSinIndef","neuterSinDef","neuterPlIndef","neuterPlDef","comparative","indefSuperlative","defSuperlative","NounGrammarNorwegian","singularIndefinite","singularDefinite","pluralIndefinite","pluralDefinite","VerbGrammarNorwegian","present","past","future","conditional","presentPerfect","pastPerfect","futurePerfect","conditionalPerfect","SmAdjGrammarNorwegian","SmNounGrammarNorwegian","SmVerbGrammarNorwegian","NorwegianCard","cardObj","numOfTranslation","singleTranslation","translation","result","trObj","checkProperties","useState","window","innerWidth","windowWidth","setWindowWidth","useEffect","addEventListener","grammarAdj","grammarNoun","grammarVerb","gender","Card","Body","Title","word","Subtitle","pronounciation","type","Text","meaning","DutchCard","Flashcard","cardLang","TranslationGroup","numOfTranslations","length","Array","fill","map","_","i","SearchCardModal","show","noWord","handleClose","Modal","onHide","Header","closeButton","Footer","Button","variant","onClick","SearchCard","validated","setValidated","hasBeenFound","setFound","wordInput","useRef","selectInput","cardInfo","setCardInfo","setCardLang","setNoWord","shouldShowModal","setShouldShowModal","Container","fluid","Row","Col","xs","Form","noValidate","onSubmit","event","lang","preventDefault","stopPropagation","currentTarget","checkValidity","current","value","fetch","method","headers","body","then","response","text","data","missingWord","console","log","parse","catch","error","Label","htmlFor","srOnly","InputGroup","Prepend","Control","ref","as","defaultValue","FormControl","required","placeholder","Feedback","style","order"],"mappings":"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","file":"static/js/5.f40cd72d.chunk.js","sourcesContent":["export function checkAdjProperties(grammarObj) {\n    const testObj = {\n        \"masculineSinIndef\": \"ikke\",\n        \"masculineSinDef\": \"ikka\",\n        \"masculinePlIndef\": \"ikke\",\n        \"masculinePlDef\": \"ikka\",\n        \"feminineSinIndef\": \"ikke\",\n        \"feminineSinDef\": \"ikka\",\n        \"femininePlIndef\": \"ikke\",\n        \"femininePlDef\": \"ikka\",\n        \"neuterSinIndef\": \"eikke\",\n        \"neuterSinDef\": \"eikka\",\n        \"neuterPlIndef\": \"ikket\",\n        \"neuterPlDef\": \"ikkete\",\n        \"comparative\": \"ikketa\",\n        \"indefSuperlative\": \"ikketan\",\n        \"defSuperlative\": \"ikketane\",\n        \"_id\": \"420\"\n    }\n    let origKeys = Object.keys(grammarObj).sort();\n    let testKeys = Object.keys(testObj).sort();\n    return JSON.stringify(origKeys) === JSON.stringify(testKeys);\n}\n\nexport function checkNounProperties(grammarObj) {\n    const testObj = {\n        \"countable\": \"true\",\n        \"gender\": \"masculine\",\n        \"singularIndefinite\": \"en hund\",\n        \"singularDefinite\": \"hunden\",\n        \"pluralIndefinite\": \"hunder\",\n        \"pluralDefinite\": \"hundene\",\n        \"_id\": \"420\"\n    }\n    let origKeys = Object.keys(grammarObj).sort();\n    let testKeys = Object.keys(testObj).sort();\n    return JSON.stringify(origKeys) === JSON.stringify(testKeys);\n}\n\nexport function checkVerbProperties(grammarObj) {\n    const testObj = {\n        \"infinitive\": \"faef\",\n        \"present\": \"aefaf\",\n        \"past\": \"efffe\",\n        \"future\": \"eea\",\n        \"conditional\": \"fafa\",\n        \"imperative\": \"fafaef\",\n        \"presentPerfect\": \"va faaan\",\n        \"pastPerfect\": \"fafeee\",\n        \"futurePerfect\": \"fafaa\",\n        \"conditionalPerfect\": \"fff\",\n        \"_id\": \"420\"\n    }\n    let origKeys = Object.keys(grammarObj).sort();\n    let testKeys = Object.keys(testObj).sort();\n    return JSON.stringify(origKeys) === JSON.stringify(testKeys);\n}","import Table from 'react-bootstrap/Table';\nimport { checkAdjProperties } from './utilsNorwegian.js';\nimport \"../../styles/CardTable.css\";\n\nfunction AdjGrammarNorwegian({ grammarObj }) {\n\n    if (!checkAdjProperties(grammarObj)) {\n        throw new TypeError(\"Wrong grammar obj structure in AdjGrammarNorwegian\");\n    }\n\n    return (\n        <>\n            <Table bordered hover size=\"sm\">\n                <thead>\n                    <tr>\n                        <th></th>\n                        <th className=\"cardTableHeader\" colSpan=\"2\">Singular</th>\n                        <th className=\"cardTableHeader\" colSpan=\"2\">Plural</th>\n                    </tr>\n                    <tr>\n                        <th></th>\n                        <th className=\"cardTableHeader\">Indefinite</th>\n                        <th className=\"cardTableHeader\">Definite</th>\n                        <th className=\"cardTableHeader\">Indefinite</th>\n                        <th className=\"cardTableHeader\">Definite</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td><strong>masc.</strong></td>\n                        <td>{grammarObj.masculineSinIndef}</td>\n                        <td>{grammarObj.masculineSinDef}</td>\n                        <td>{grammarObj.masculinePlIndef}</td>\n                        <td>{grammarObj.masculinePlDef}</td>\n                    </tr>\n                    <tr>\n                        <td><strong>fem.</strong></td>\n                        <td>{grammarObj.feminineSinIndef}</td>\n                        <td>{grammarObj.feminineSinDef}</td>\n                        <td>{grammarObj.femininePlIndef}</td>\n                        <td>{grammarObj.femininePlDef}</td>\n                    </tr>\n                    <tr>\n                        <td><strong>neut.</strong></td>\n                        <td>{grammarObj.neuterSinIndef}</td>\n                        <td>{grammarObj.neuterSinDef}</td>\n                        <td>{grammarObj.neuterPlIndef}</td>\n                        <td>{grammarObj.neuterPlDef}</td>\n                    </tr>\n                </tbody>\n            </Table>\n            <Table bordered hover size=\"sm\">\n                <thead>\n                    <tr>\n                        <th className=\"cardTableHeader\">Comparative</th>\n                        <th className=\"cardTableHeader\">Indefinite superlative</th>\n                        <th className=\"cardTableHeader\">Definite superlative</th>\n                    </tr>\n                    <tr>\n                        <td>{grammarObj.comparative}</td>\n                        <td>{grammarObj.indefSuperlative}</td>\n                        <td>{grammarObj.defSuperlative}</td>\n                    </tr>\n                </thead>\n            </Table>\n        </>\n    )\n}\n\nexport default AdjGrammarNorwegian;","import Table from 'react-bootstrap/Table';\nimport { checkNounProperties } from './utilsNorwegian.js';\nimport \"../../styles/CardTable.css\";\n\nfunction NounGrammarNorwegian({ grammarObj }) {\n\n    if (!checkNounProperties(grammarObj)) {\n        throw new TypeError(\"Wrong grammar obj structure in NounGrammarNorwegian\");\n    }\n\n    return (\n        <Table bordered hover size=\"sm\">\n            <thead>\n                <tr>\n                    <th></th>\n                    <th className=\"cardTableHeader\">Singular</th>\n                    <th className=\"cardTableHeader\">Plural</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td><strong>Indefinite</strong></td>\n                    <td>{grammarObj.singularIndefinite}</td>\n                    <td>{grammarObj.singularDefinite}</td>\n                </tr>\n                <tr>\n                    <td><strong>Definite</strong></td>\n                    <td>{grammarObj.pluralIndefinite}</td>\n                    <td>{grammarObj.pluralDefinite}</td>\n                </tr>\n            </tbody>\n        </Table>\n    )\n}\n\nexport default NounGrammarNorwegian;","import Table from 'react-bootstrap/Table';\nimport { checkVerbProperties } from './utilsNorwegian.js';\n\nfunction VerbGrammarNorwegian({ grammarObj }) {\n\n    if (!checkVerbProperties(grammarObj)) {\n        throw new TypeError(\"Wrong grammar obj structure in VerbGrammarNorwegian\");\n    }\n\n    return (\n        <Table bordered hover size=\"sm\">\n            <thead>\n                <tr>\n                    <th></th>\n                    <th className=\"cardTableHeader\">Present</th>\n                    <th className=\"cardTableHeader\">Past</th>\n                    <th className=\"cardTableHeader\">Future</th>\n                    <th className=\"cardTableHeader\">Conditional</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <th>Simple</th>\n                    <td>{grammarObj.present}</td>\n                    <td>{grammarObj.past}</td>\n                    <td>{grammarObj.future}</td>\n                    <td>{grammarObj.conditional}</td>\n                </tr>\n                <tr>\n                    <td><strong>Perfect</strong></td>\n                    <td>{grammarObj.presentPerfect}</td>\n                    <td>{grammarObj.pastPerfect}</td>\n                    <td>{grammarObj.futurePerfect}</td>\n                    <td>{grammarObj.conditionalPerfect}</td>\n                </tr>\n            </tbody>\n        </Table>\n    )\n}\n\nexport default VerbGrammarNorwegian;","import Table from 'react-bootstrap/Table';\nimport { checkAdjProperties } from '../utilsNorwegian.js';\nimport \"../../../styles/CardTable.css\";\n\nfunction SmAdjGrammarNorwegian({grammarObj}) {\n\n    if(!checkAdjProperties(grammarObj)) {\n        throw new TypeError(\"Wrong grammar obj structure in SmAdjGrammarNorwegian\");\n    }\n\n    return (\n        <>\n            <Table bordered hover size=\"sm\">\n                <tbody data-testid=\"testCard\">\n                    <tr>\n                        <th className=\"cardTableHeader\" colSpan=\"2\">Masculine</th>\n                    </tr>\n                    <tr>\n                        <th>Singular Indefinite</th>\n                        <td>{grammarObj.masculineSinIndef}</td>\n                    </tr>\n                    <tr>\n                        <th>Singular Definite</th>\n                        <td>{grammarObj.masculineSinDef}</td>\n                    </tr>\n                    <tr>\n                        <th>Plural Indefinite</th>\n                        <td>{grammarObj.masculinePlIndef}</td>\n                    </tr>\n                    <tr>\n                        <th>Plural Definite</th>\n                        <td>{grammarObj.masculinePlDef}</td>\n                    </tr>\n                    <tr>\n                        <th className=\"cardTableHeader\" colSpan=\"2\">Feminine</th>\n                    </tr>\n                    <tr>\n                        <th>Singular Indefinite</th>\n                        <td>{grammarObj.feminineSinIndef}</td>\n                    </tr>\n                    <tr>\n                        <th>Singular Definite</th>\n                        <td>{grammarObj.feminineSinDef}</td>\n                    </tr>\n                    <tr>\n                        <th>Plural Indefinite</th>\n                        <td>{grammarObj.femininePlIndef}</td>\n                    </tr>\n                    <tr>\n                        <th>Plural Definite</th>\n                        <td>{grammarObj.femininePlDef}</td>\n                    </tr>\n                    <tr>\n                        <th className=\"cardTableHeader\" colSpan=\"2\">Neuter</th>\n                    </tr>\n                    <tr>\n                        <th>Singular Indefinite</th>\n                        <td>{grammarObj.neuterSinIndef}</td>\n                    </tr>\n                    <tr>\n                        <th>Singular Definite</th>\n                        <td>{grammarObj.neuterSinDef}</td>\n                    </tr>\n                    <tr>\n                        <th>Plural Indefinite</th>\n                        <td>{grammarObj.neuterPlIndef}</td>\n                    </tr>\n                    <tr>\n                        <th>Plural Definite</th>\n                        <td>{grammarObj.neuterPlDef}</td>\n                    </tr>\n                </tbody>\n            </Table>\n            <Table bordered hover size=\"sm\">\n                <tbody>\n                    <tr>\n                        <th>Comparative</th>\n                        <td>{grammarObj.comparative}</td>\n                    </tr>\n                    <tr>\n                        <th>Indefinite superlative</th>\n                        <td>{grammarObj.indefSuperlative}</td>\n                    </tr>\n                    <tr>\n                        <th>Definite superlative</th>\n                        <td>{grammarObj.defSuperlative}</td>\n                    </tr>\n                </tbody>\n            </Table>\n        </>\n    )\n}\n\nexport default SmAdjGrammarNorwegian;","import Table from 'react-bootstrap/Table';\nimport { checkNounProperties } from '../utilsNorwegian.js';\n\nfunction SmNounGrammarNorwegian({grammarObj}) {\n\n    if(!checkNounProperties(grammarObj)) {\n        throw new TypeError(\"Wrong grammar obj structure in SmNounGrammarNorwegian\");\n    }\n\n    return (\n        <Table bordered hover size=\"sm\">\n            <tbody data-testid=\"testCard\">\n                <tr>\n                    <th>Singular Indefinite</th>\n                    <td>{grammarObj.singularIndefinite}</td>\n                </tr>\n                <tr>\n                    <th>Singular Definite</th>\n                    <td>{grammarObj.singularDefinite}</td>\n                </tr>\n                <tr>\n                    <th>Plural Indefinite</th>\n                    <td>{grammarObj.pluralIndefinite}</td>\n                </tr>\n                <tr>\n                    <th>Plural Definite</th>\n                    <td>{grammarObj.pluralDefinite}</td>\n                </tr>\n            </tbody>\n        </Table>\n    )\n}\n\nexport default SmNounGrammarNorwegian;","import Table from 'react-bootstrap/Table';\nimport { checkVerbProperties } from '../utilsNorwegian.js';\nimport \"../../../styles/CardTable.css\";\n\nfunction SmVerbGrammarNorwegian({grammarObj}) {\n\n    if(!checkVerbProperties(grammarObj)) {\n        throw new TypeError(\"Wrong grammar obj structure in SmVerbGrammarNorwegian\");\n    }\n\n    return (\n        <Table bordered hover size=\"sm\">\n            <tbody data-testid=\"testCard\">\n                <tr>\n                    <th className=\"cardTableHeader\" colSpan=\"2\">Simple</th>\n                </tr>\n                <tr>\n                    <th>Present</th>\n                    <td>{grammarObj.present}</td>\n                </tr>\n                <tr>\n                    <th>Past</th>\n                    <td>{grammarObj.past}</td>\n                </tr>\n                <tr>\n                    <th>Future</th>\n                    <td>{grammarObj.future}</td>\n                </tr>\n                <tr>\n                    <th>Conditional</th>\n                    <td>{grammarObj.conditional}</td>\n                </tr>\n                <tr>\n                    <th className=\"cardTableHeader\" colSpan=\"2\">Perfect</th>\n                </tr>\n                <tr>\n                    <th>Present</th>\n                    <td>{grammarObj.presentPerfect}</td>\n                </tr>\n                <tr>\n                    <th>Past</th>\n                    <td>{grammarObj.pastPerfect}</td>\n                </tr>\n                <tr>\n                    <th>Future</th>\n                    <td>{grammarObj.futurePerfect}</td>\n                </tr>\n                <tr>\n                    <th>Conditional</th>\n                    <td>{grammarObj.conditionalPerfect}</td>\n                </tr>\n            </tbody>\n        </Table>\n    )\n}\n\nexport default SmVerbGrammarNorwegian;","import { useState, useEffect } from 'react';\n\nimport Card from 'react-bootstrap/Card';\nimport AdjGrammarNorwegian from './AdjGrammarNorwegian';\nimport NounGrammarNorwegian from './NounGrammarNorwegian';\nimport VerbGrammarNorwegian from './VerbGrammarNorwegian';\n\nimport SmAdjGrammarNorwegian from './small/SmAdjGrammarNorwegian.jsx';\nimport SmNounGrammarNorwegian from './small/SmNounGrammarNorwegian';\nimport SmVerbGrammarNorwegian from './small/SmVerbGrammarNorwegian';\n\nimport '../../styles/Card.css';\n\nfunction checkProperties(cardObj, numOfTranslation) {\n    let result = false;\n    if ('word' in cardObj && 'pronounciation' in cardObj && 'translation' in cardObj) {\n        let trObj = cardObj.translation[numOfTranslation];\n        if ('grammarAdj' in trObj || 'grammarNoun' in trObj || 'grammarVerb' in trObj) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nfunction NorwegianCard({ cardObj, numOfTranslation }) {\n    let singleTranslation = cardObj.translation[numOfTranslation];\n\n    if (!checkProperties(cardObj, numOfTranslation)) {\n        throw new TypeError(\"Wrong card obj structure in NorwegianCard\");\n    }\n\n    const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n\n    useEffect(() => {\n        function handleResize() {\n            setWindowWidth(window.innerWidth);\n        }\n\n        window.addEventListener('resize', handleResize);\n    });\n\n    let result = null;\n\n    if (windowWidth >= 576) {\n        if (\"grammarAdj\" in singleTranslation) {\n            result = <AdjGrammarNorwegian grammarObj={singleTranslation.grammarAdj} />\n        } else if (\"grammarNoun\" in singleTranslation) {\n            result = <NounGrammarNorwegian grammarObj={singleTranslation.grammarNoun} />\n        } else {\n            result = <VerbGrammarNorwegian grammarObj={singleTranslation.grammarVerb} />\n        }\n    } else {\n        if (\"grammarAdj\" in singleTranslation) {\n            result = <SmAdjGrammarNorwegian grammarObj={singleTranslation.grammarAdj} />;\n        } else if (\"grammarNoun\" in singleTranslation) {\n            result = <SmNounGrammarNorwegian grammarObj={singleTranslation.grammarNoun} />;\n        } else {\n            result = <SmVerbGrammarNorwegian grammarObj={singleTranslation.grammarVerb} />;\n        }\n    }\n\n    let gender = \"grammarNoun\" in singleTranslation ? singleTranslation.grammarNoun.gender : null;\n\n    return (\n        <Card>\n            <Card.Body>\n                <Card.Title>{cardObj.word}</Card.Title>\n                <Card.Subtitle className=\"mb-2\">{cardObj.pronounciation}</Card.Subtitle>\n                <Card.Subtitle className=\"mb-2 text-muted\">{singleTranslation.type} {gender}</Card.Subtitle>\n                <Card.Text>\n                    {singleTranslation.meaning}\n                </Card.Text>\n                {result}\n            </Card.Body>\n        </Card>\n    )\n}\n\nexport default NorwegianCard;","function DutchCard({ cardObj, numOfTranslation }) {\n    return (\n        <div>\n\n        </div>\n    )\n}\n\nexport default DutchCard;","import NorwegianCard from \"./norwegian/NorwegianCard\";\nimport DutchCard from \"./dutch/DutchCard\";\n\nfunction Flashcard({ cardLang, cardObj, numOfTranslation }) {\n\n    let result = null;\n\n    switch (cardLang) {\n        case \"Dutch\": result = <DutchCard cardObj={cardObj} />; break;\n        case \"Norwegian\": result = <NorwegianCard cardObj={cardObj} numOfTranslation={numOfTranslation} />; break;\n        default: result = null;\n    }\n\n    return (\n        result\n    );\n}\n\nexport default Flashcard;","import Flashcard from \"./Flashcard.jsx\";\n\nfunction TranslationGroup({ cardLang, cardObj }) {\n    let numOfTranslations = cardObj.translation.length;\n    return (\n        <div>\n            {Array(numOfTranslations).fill().map((_, i) => <Flashcard key={i} cardLang={cardLang} cardObj={cardObj} numOfTranslation={i} />)}\n        </div>\n    )\n}\n\nexport default TranslationGroup;","import Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\n\nfunction SearchCardModal({show, noWord, handleClose}) {\n    return (\n        <Modal show={show} onHide={handleClose}>\n            <Modal.Header closeButton>\n                <Modal.Title>Not in dictionary</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>We couldn't find the word {noWord} in the dictionary</Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"primary\" onClick={handleClose} data-testid=\"testCloseModal\">\n                    Close\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    )\n}\n\nexport default SearchCardModal;","import InputGroup from 'react-bootstrap/InputGroup';\nimport Form from 'react-bootstrap/Form';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nimport { useState, useRef } from 'react';\n\nimport '../styles/SearchCard.css';\nimport TranslationGroup from './TranslationGroup.jsx';\nimport SearchCardModal from './SearchCardModal.jsx';\nimport { fetchGetCard } from '../utils/fetchGetCard.js';\n\nfunction SearchCard() {\n\n    const [validated, setValidated] = useState(false);\n    const [hasBeenFound, setFound] = useState(false);\n    const wordInput = useRef(null);\n    const selectInput = useRef(null);\n\n    const [cardInfo, setCardInfo] = useState(null);\n    const [cardLang, setCardLang] = useState(null);\n\n    const [noWord, setNoWord] = useState(null);\n    const [shouldShowModal, setShouldShowModal] = useState(false);\n\n    const handleClose = () => setShouldShowModal(false);\n\n    const showModal = (missingWord) => {\n        setNoWord(missingWord);\n        setShouldShowModal(true);\n        return;\n    }\n\n    const searchCard = (event) => {\n\n        event.preventDefault();\n        event.stopPropagation();\n\n        if (event.currentTarget.checkValidity() === true) {\n            setValidated(false);\n            fetchGetCard(selectInput.current.value, wordInput.current.value)\n                .then(data => {\n                    if (data === \"DB_ERR\") {\n                        console.log(\"Oops, something went wrong!\");\n                    } else if (data === \"MISSING_WORD_PASSED\") {\n                        console.log(\"Somehow your word wasn't passed to the backend\");\n                    } else {\n                        if (data === '') {\n                            showModal(wordInput.current.value);\n                        } else {\n                            setCardInfo(JSON.parse(data));\n                            setCardLang(selectInput.current.value);\n                            setFound(true);\n                        }\n                    }\n                }).catch((error) => {\n                    console.error('Error:', error);\n                })\n        } else {\n            setValidated(true);\n        }\n    }\n\n    return (\n        <Container fluid>\n            <Row>\n                <Col>\n                </Col>\n                <Col xs={10}>\n                    <Form className=\"mt-2\" noValidate validated={validated} onSubmit={searchCard}>\n                        <Form.Label htmlFor=\"inlineFormInputGroup\" srOnly>\n                            Word\n                        </Form.Label>\n                        <InputGroup>\n                            <InputGroup.Prepend>\n                                <InputGroup.Text>Language:</InputGroup.Text>\n                            </InputGroup.Prepend>\n                            <Form.Control className=\"langDropdown\" ref={selectInput} as=\"select\" defaultValue=\"Norwegian\">\n                                <option>Dutch</option>\n                                <option>Norwegian</option>\n                            </Form.Control>\n                            <InputGroup.Prepend>\n                                <InputGroup.Text>Search:</InputGroup.Text>\n                            </InputGroup.Prepend>\n                            <FormControl required ref={wordInput} placeholder=\"Word\" data-testid=\"testWordInput\" />\n                            <FormControl.Feedback style={{ order: 4 }} type=\"invalid\">Empty box!</FormControl.Feedback>\n                            <Button data-testid=\"testButtonSearch\" type=\"submit\" variant=\"success\">\n                                Submit\n                            </Button>\n                        </InputGroup>\n                    </Form>\n                </Col>\n                <Col>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                </Col>\n                <Col xs={10} className=\"mt-2\">\n                    {hasBeenFound ? <TranslationGroup cardLang={cardLang} cardObj={cardInfo} /> : null}\n                </Col>\n                <Col>\n                </Col>\n            </Row>\n            <SearchCardModal show={shouldShowModal} noWord={noWord} handleClose={handleClose}/>\n        </Container>\n    )\n}\n\nexport default SearchCard;","export const fetchGetCard = (lang, word) => {\n    return fetch(\"/getCard\", {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ lang: lang, word: word })\n    }).then(response => response.text())\n}"],"sourceRoot":""}