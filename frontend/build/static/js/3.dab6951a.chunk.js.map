{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/react-bootstrap/esm/InputGroup.js","utils/fetchAddCard.js","utils/dashOnEmptyInput.js","components/norwegian/NorwegianAddAdjective.jsx","components/norwegian/NorwegianAddNoun.jsx","components/norwegian/NorwegianAddVerb.jsx","components/norwegian/NorwegianAddAbstract.jsx","components/AddCardAbstractForm.jsx","components/AddCard.jsx"],"names":["_arrayLikeToArray","arr","len","length","i","arr2","Array","_slicedToArray","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","err","o","minLen","n","prototype","toString","call","slice","constructor","name","from","test","TypeError","_excluded","InputGroupAppend","createWithBsPrefix","InputGroupPrepend","InputGroupText","Component","InputGroup","React","forwardRef","_ref","ref","bsPrefix","size","hasValidation","className","_ref$as","as","props","_objectWithoutPropertiesLoose","useBootstrapPrefix","createElement","_extends","classNames","displayName","InputGroupWithExtras","Text","Radio","type","Checkbox","Append","Prepend","fetchAddCard","lang","cardObj","fetch","method","headers","body","JSON","stringify","then","response","text","dashOnEmptyInput","str","current","NorwegianAddAdjective","useState","validated","setValidated","wordInput","useRef","pronInput","meanInput","mascSinIndefInput","mascSinDefInput","mascPlIndefInput","mascPlDefInput","femSinIndefInput","femSinDefInput","femPlIndefInput","femPlDefInput","neuterSinIndefInput","neuterSinDefInput","neuterPlIndefInput","neuterPlDefInput","comparativeInput","indefSuperlativeInput","defSuperlativeInput","Form","onSubmit","event","preventDefault","stopPropagation","currentTarget","checkValidity","data","console","log","catch","error","noValidate","Group","Row","Label","column","sm","Col","Control","required","placeholder","Button","variant","NorwegianAddNoun","checkedCountable","setCheckedCountable","genderInput","sinDefInput","sinIndefInput","plDefInput","plIndefInput","onClick","style","width","NorwegianAddVerb","infinitiveInput","presentInput","pastInput","futureInput","condInput","imperInput","presPerfInput","pastPerfInput","futurePerfInput","condPerfInput","NorwegianAddAbstract","result","speech","AddCardAbstractForm","langSelected","grammarSelected","AddCard","selectLang","selectSpeech","currLang","setCurrLang","currSpeech","setCurrSpeech","Container","fluid","xs","onChange","defaultValue","index","map"],"mappings":"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","file":"static/js/3.dab6951a.chunk.js","sourcesContent":["export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"bsPrefix\", \"size\", \"hasValidation\", \"className\", \"as\"];\nimport classNames from 'classnames';\nimport React from 'react';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar InputGroupAppend = createWithBsPrefix('input-group-append');\nvar InputGroupPrepend = createWithBsPrefix('input-group-prepend');\nvar InputGroupText = createWithBsPrefix('input-group-text', {\n  Component: 'span'\n});\n\nvar InputGroupCheckbox = function InputGroupCheckbox(props) {\n  return /*#__PURE__*/React.createElement(InputGroupText, null, /*#__PURE__*/React.createElement(\"input\", _extends({\n    type: \"checkbox\"\n  }, props)));\n};\n\nvar InputGroupRadio = function InputGroupRadio(props) {\n  return /*#__PURE__*/React.createElement(InputGroupText, null, /*#__PURE__*/React.createElement(\"input\", _extends({\n    type: \"radio\"\n  }, props)));\n};\n\n/**\n *\n * @property {InputGroupAppend} Append\n * @property {InputGroupPrepend} Prepend\n * @property {InputGroupText} Text\n * @property {InputGroupRadio} Radio\n * @property {InputGroupCheckbox} Checkbox\n */\nvar InputGroup = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      size = _ref.size,\n      hasValidation = _ref.hasValidation,\n      className = _ref.className,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group');\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames(className, bsPrefix, size && bsPrefix + \"-\" + size, hasValidation && 'has-validation')\n  }));\n});\nInputGroup.displayName = 'InputGroup';\n\nvar InputGroupWithExtras = _extends({}, InputGroup, {\n  Text: InputGroupText,\n  Radio: InputGroupRadio,\n  Checkbox: InputGroupCheckbox,\n  Append: InputGroupAppend,\n  Prepend: InputGroupPrepend\n});\n\nexport default InputGroupWithExtras;","export const fetchAddCard = (lang, cardObj) => {\r\n    return fetch(\"/addCard\", {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ lang: lang, cardObj: cardObj })\r\n    }).then(response => response.text());\r\n};","export const dashOnEmptyInput = (str) => {\r\n    return str.current.value === '' ? '-' : str.current.value\r\n};","import Form from 'react-bootstrap/Form';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nimport '../../styles/AddCard.css';\r\nimport { useState, useRef } from 'react';\r\nimport { fetchAddCard } from '../../utils/fetchAddCard';\r\nimport { dashOnEmptyInput } from '../../utils/dashOnEmptyInput';\r\n\r\nfunction NorwegianAddAdjective() {\r\n\r\n    const [validated, setValidated] = useState(false);\r\n\r\n    const wordInput = useRef(null);\r\n    const pronInput = useRef(null);\r\n    const meanInput = useRef(null);\r\n\r\n    const mascSinIndefInput = useRef(null);\r\n    const mascSinDefInput = useRef(null);\r\n    const mascPlIndefInput = useRef(null);\r\n    const mascPlDefInput = useRef(null);\r\n\r\n    const femSinIndefInput = useRef(null);\r\n    const femSinDefInput = useRef(null);\r\n    const femPlIndefInput = useRef(null);\r\n    const femPlDefInput = useRef(null);\r\n\r\n    const neuterSinIndefInput = useRef(null);\r\n    const neuterSinDefInput = useRef(null);\r\n    const neuterPlIndefInput = useRef(null);\r\n    const neuterPlDefInput = useRef(null);\r\n\r\n    const comparativeInput = useRef(null);\r\n    const indefSuperlativeInput = useRef(null);\r\n    const defSuperlativeInput = useRef(null);\r\n\r\n    const addCard = (event) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n\r\n        if (event.currentTarget.checkValidity() === true) {\r\n            setValidated(false);\r\n            const cardObj = {\r\n                \"word\": wordInput.current.value,\r\n                \"translation\": [\r\n                    {\r\n                        \"type\": \"noun\",\r\n                        \"pronounciation\": pronInput.current.value,\r\n                        \"meaning\": meanInput.current.value,\r\n                        \"grammarAdj\": {\r\n                            \"masculineSinIndef\": dashOnEmptyInput(mascSinIndefInput),\r\n                            \"masculineSinDef\": dashOnEmptyInput(mascSinDefInput),\r\n                            \"masculinePlIndef\": dashOnEmptyInput(mascPlIndefInput),\r\n                            \"masculinePlDef\": dashOnEmptyInput(mascPlDefInput),\r\n                            \"feminineSinIndef\": dashOnEmptyInput(femSinIndefInput),\r\n                            \"feminineSinDef\": dashOnEmptyInput(femSinDefInput),\r\n                            \"femininePlIndef\": dashOnEmptyInput(femPlIndefInput),\r\n                            \"femininePlDef\": dashOnEmptyInput(femPlDefInput),\r\n                            \"neuterSinIndef\": dashOnEmptyInput(neuterSinIndefInput),\r\n                            \"neuterSinDef\": dashOnEmptyInput(neuterSinDefInput),\r\n                            \"neuterPlIndef\": dashOnEmptyInput(neuterPlIndefInput),\r\n                            \"neuterPlDef\": dashOnEmptyInput(neuterPlDefInput),\r\n                            \"comparative\": dashOnEmptyInput(comparativeInput),\r\n                            \"indefSuperlative\": dashOnEmptyInput(indefSuperlativeInput),\r\n                            \"defSuperlative\": dashOnEmptyInput(defSuperlativeInput)\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n            fetchAddCard(\"Norwegian\", cardObj).then(data => {\r\n                if (data === \"DB_ERR\") {\r\n                    console.log(\"db err\");\r\n                } else if (data === \"MISSING_WORD_PASSED\") {\r\n                    console.log(\"missing word\");\r\n                } else {\r\n                    console.log(\"OK!\")\r\n                }\r\n            }).catch((error) => {\r\n                console.error(\"Error: \", error);\r\n            })\r\n        } else {\r\n            setValidated(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Form onSubmit={addCard} noValidate validated={validated}>\r\n            <Form.Group as={Row} className=\"mb-2\">\r\n                <Form.Label column sm=\"2\">\r\n                    Word\r\n                </Form.Label>\r\n                <Col sm={10}>\r\n                    <Form.Control ref={wordInput} required type=\"text\" placeholder=\"Type here\" />\r\n                </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row} className=\"mb-2\">\r\n                <Form.Label column sm=\"2\">\r\n                    Pronounciation\r\n                </Form.Label>\r\n                <Col sm={10}>\r\n                    <Form.Control ref={pronInput} required type=\"text\" placeholder=\"Type here\" />\r\n                </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row} className=\"mb-2\">\r\n                <Form.Label column sm=\"2\">\r\n                    Meaning\r\n                </Form.Label>\r\n                <Col sm={10}>\r\n                    <Form.Control ref={meanInput} required type=\"text\" placeholder=\"Type here\" />\r\n                </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row} className=\"mb-2\">\r\n                <Form.Label column sm=\"2\">\r\n                    Masculine Singular Indefinite\r\n                </Form.Label>\r\n                <Col sm={10}>\r\n                    <Form.Control ref={mascSinIndefInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\r\n                </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row} className=\"mb-2\">\r\n                <Form.Label column sm=\"2\">\r\n                    Masculine Singular Definite\r\n                </Form.Label>\r\n                <Col sm={10}>\r\n                    <Form.Control ref={mascSinDefInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\r\n                </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row} className=\"mb-2\">\r\n                <Form.Label column sm=\"2\">\r\n                    Masculine Plural Indefinite\r\n                </Form.Label>\r\n                <Col sm={10}>\r\n                    <Form.Control ref={mascPlIndefInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\r\n                </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row} className=\"mb-2\">\r\n                <Form.Label column sm=\"2\">\r\n                    Masculine Plural Definite\r\n                </Form.Label>\r\n                <Col sm={10}>\r\n                    <Form.Control ref={mascPlDefInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\r\n                </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row} className=\"mb-2\">\r\n                <Form.Label column sm=\"2\">\r\n                    Feminine Singular Indefinite\r\n                </Form.Label>\r\n                <Col sm={10}>\r\n                    <Form.Control ref={femSinIndefInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\r\n                </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row} className=\"mb-2\">\r\n                <Form.Label column sm=\"2\">\r\n                    Feminine Singular Definite\r\n                </Form.Label>\r\n                <Col sm={10}>\r\n                    <Form.Control ref={femSinDefInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\r\n                </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row} className=\"mb-2\">\r\n                <Form.Label column sm=\"2\">\r\n                    Feminine Plural Indefinite\r\n                </Form.Label>\r\n                <Col sm={10}>\r\n                    <Form.Control ref={femPlIndefInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\r\n                </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row} className=\"mb-2\">\r\n                <Form.Label column sm=\"2\">\r\n                    Feminine Plural Definite\r\n                </Form.Label>\r\n                <Col sm={10}>\r\n                    <Form.Control ref={femPlDefInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\r\n                </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row} className=\"mb-2\">\r\n                <Form.Label column sm=\"2\">\r\n                    Neuter Singular Indefinite\r\n                </Form.Label>\r\n                <Col sm={10}>\r\n                    <Form.Control ref={neuterSinIndefInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\r\n                </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row} className=\"mb-2\">\r\n                <Form.Label column sm=\"2\">\r\n                    Neuter Singular Definite\r\n                </Form.Label>\r\n                <Col sm={10}>\r\n                    <Form.Control ref={neuterSinDefInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\r\n                </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row} className=\"mb-2\">\r\n                <Form.Label column sm=\"2\">\r\n                    Neuter Plural Indefinite\r\n                </Form.Label>\r\n                <Col sm={10}>\r\n                    <Form.Control ref={neuterPlIndefInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\r\n                </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row} className=\"mb-2\">\r\n                <Form.Label column sm=\"2\">\r\n                    Neuter Plural Definite\r\n                </Form.Label>\r\n                <Col sm={10}>\r\n                    <Form.Control ref={neuterPlDefInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\r\n                </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row} className=\"mb-2\">\r\n                <Form.Label column sm=\"2\">\r\n                    Comparative\r\n                </Form.Label>\r\n                <Col sm={10}>\r\n                    <Form.Control ref={comparativeInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\r\n                </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row} className=\"mb-2\">\r\n                <Form.Label column sm=\"2\">\r\n                    Indefinite Superlative\r\n                </Form.Label>\r\n                <Col sm={10}>\r\n                    <Form.Control ref={indefSuperlativeInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\r\n                </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row} className=\"mb-2\">\r\n                <Form.Label column sm=\"2\">\r\n                    Definite Superlative\r\n                </Form.Label>\r\n                <Col sm={10}>\r\n                    <Form.Control ref={defSuperlativeInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\r\n                </Col>\r\n            </Form.Group>\r\n            <Button variant=\"success\" type=\"submit\">\r\n                Add Card\r\n            </Button>\r\n        </Form>\r\n    );\r\n}\r\n\r\nexport default NorwegianAddAdjective;","import Form from 'react-bootstrap/Form';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nimport '../../styles/AddCard.css';\r\nimport { useState, useRef } from 'react';\r\nimport { fetchAddCard } from '../../utils/fetchAddCard';\r\nimport { dashOnEmptyInput } from '../../utils/dashOnEmptyInput';\r\n\r\nfunction NorwegianAddNoun() {\r\n\r\n    const [validated, setValidated] = useState(false);\r\n    const [checkedCountable, setCheckedCountable] = useState(false);\r\n\r\n    const wordInput = useRef(null);\r\n    const pronInput = useRef(null);\r\n    const genderInput = useRef(null);\r\n    const meanInput = useRef(null);\r\n    const sinDefInput = useRef(null);\r\n    const sinIndefInput = useRef(null);\r\n    const plDefInput = useRef(null);\r\n    const plIndefInput = useRef(null);\r\n\r\n    const addCard = (event) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n\r\n        if (event.currentTarget.checkValidity() === true) {\r\n            setValidated(false);\r\n            const cardObj = {\r\n                \"word\": wordInput.current.value,\r\n                \"translation\": [\r\n                    {\r\n                        \"type\": \"noun\",\r\n                        \"pronounciation\": pronInput.current.value,\r\n                        \"meaning\": meanInput.current.value,\r\n                        \"grammarNoun\": {\r\n                            \"countable\": checkedCountable,\r\n                            \"gender\": genderInput.current.value,\r\n                            \"singularIndefinite\": dashOnEmptyInput(sinIndefInput),\r\n                            \"singularDefinite\": dashOnEmptyInput(sinDefInput),\r\n                            \"pluralIndefinite\": dashOnEmptyInput(plIndefInput),\r\n                            \"pluralDefinite\": dashOnEmptyInput(plDefInput)\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n            fetchAddCard(\"Norwegian\", cardObj).then(data => {\r\n                if (data === \"DB_ERR\") {\r\n                    console.log(\"db err\");\r\n                } else if (data === \"MISSING_WORD_PASSED\") {\r\n                    console.log(\"missing word\");\r\n                } else {\r\n                    console.log(\"OK!\")\r\n                }\r\n            }).catch((error) => {\r\n                console.error(\"Error: \", error);\r\n            })\r\n        } else {\r\n            setValidated(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Form onSubmit={addCard} noValidate validated={validated}>\r\n            <Form.Group as={Row} className=\"mb-2\">\r\n                <Form.Label column sm=\"2\">\r\n                    Word\r\n                </Form.Label>\r\n                <Col sm={10}>\r\n                    <Form.Control ref={wordInput} required type=\"text\" placeholder=\"Type here\" />\r\n                </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row} className=\"mb-2\">\r\n                <Form.Label column sm=\"2\">\r\n                    Pronounciation\r\n                </Form.Label>\r\n                <Col sm={10}>\r\n                    <Form.Control ref={pronInput} required type=\"text\" placeholder=\"Type here\" />\r\n                </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row} className=\"mb-2\">\r\n                <Form.Label column sm=\"2\">\r\n                    Countable\r\n                </Form.Label>\r\n                <Col sm={10}>\r\n                    <Form.Control onClick={() => setCheckedCountable(!checkedCountable)} style={{ width: \"auto\" }} type=\"checkbox\" />\r\n                </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row} className=\"mb-2\">\r\n                <Form.Label column sm=\"2\">\r\n                    Gender\r\n                </Form.Label>\r\n                <Col sm={10}>\r\n                    <Form.Control ref={genderInput} required as=\"select\">\r\n                        <option value=\"masculine\">Masculine</option>\r\n                        <option value=\"feminine\">Feminine</option>\r\n                        <option value=\"neuter\">Neuter</option>\r\n                    </Form.Control>\r\n                </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row} className=\"mb-2\">\r\n                <Form.Label column sm=\"2\">\r\n                    Meaning\r\n                </Form.Label>\r\n                <Col sm={10}>\r\n                    <Form.Control ref={meanInput} required type=\"text\" placeholder=\"Type here\" />\r\n                </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row} className=\"mb-2\">\r\n                <Form.Label column sm=\"2\">\r\n                    Singular Definite\r\n                </Form.Label>\r\n                <Col sm={10}>\r\n                    <Form.Control ref={sinDefInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\r\n                </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row} className=\"mb-2\">\r\n                <Form.Label column sm=\"2\">\r\n                    Singular Indefinite\r\n                </Form.Label>\r\n                <Col sm={10}>\r\n                    <Form.Control ref={sinIndefInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\r\n                </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row} className=\"mb-2\">\r\n                <Form.Label column sm=\"2\">\r\n                    Plural Definite\r\n                </Form.Label>\r\n                <Col sm={10}>\r\n                    <Form.Control ref={plDefInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\r\n                </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row} className=\"mb-2\">\r\n                <Form.Label column sm=\"2\">\r\n                    Plural Indefinite\r\n                </Form.Label>\r\n                <Col sm={10}>\r\n                    <Form.Control ref={plIndefInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\r\n                </Col>\r\n            </Form.Group>\r\n            <Button variant=\"success\" type=\"submit\">\r\n                Add Card\r\n            </Button>\r\n        </Form>\r\n    );\r\n}\r\n\r\nexport default NorwegianAddNoun;","import Form from 'react-bootstrap/Form';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nimport '../../styles/AddCard.css';\r\nimport { useState, useRef } from 'react';\r\nimport { fetchAddCard } from '../../utils/fetchAddCard';\r\nimport { dashOnEmptyInput } from '../../utils/dashOnEmptyInput';\r\n\r\nfunction NorwegianAddVerb() {\r\n\r\n    const [validated, setValidated] = useState(false);\r\n\r\n    const wordInput = useRef(null);\r\n    const pronInput = useRef(null);\r\n    const meanInput = useRef(null);\r\n\r\n    const infinitiveInput = useRef(null);\r\n    const presentInput = useRef(null);\r\n    const pastInput = useRef(null);\r\n    const futureInput = useRef(null);\r\n    const condInput = useRef(null);\r\n    const imperInput = useRef(null);\r\n    const presPerfInput = useRef(null);\r\n    const pastPerfInput = useRef(null);\r\n    const futurePerfInput = useRef(null);\r\n    const condPerfInput = useRef(null);\r\n\r\n    const addCard = (event) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n\r\n        if (event.currentTarget.checkValidity() === true) {\r\n            setValidated(false);\r\n            const cardObj = {\r\n                \"word\": wordInput.current.value,\r\n                \"translation\": [\r\n                    {\r\n                        \"type\": \"noun\",\r\n                        \"pronounciation\": pronInput.current.value,\r\n                        \"meaning\": meanInput.current.value,\r\n                        \"grammarVerb\": {\r\n                            \"infinitive\": dashOnEmptyInput(infinitiveInput),\r\n                            \"present\": dashOnEmptyInput(presentInput),\r\n                            \"past\": dashOnEmptyInput(pastInput),\r\n                            \"future\": dashOnEmptyInput(futureInput),\r\n                            \"conditional\": dashOnEmptyInput(condInput),\r\n                            \"imperative\": dashOnEmptyInput(imperInput),\r\n                            \"presentPerfect\": dashOnEmptyInput(presPerfInput),\r\n                            \"pastPerfect\": dashOnEmptyInput(pastPerfInput),\r\n                            \"futurePerfect\": dashOnEmptyInput(futurePerfInput),\r\n                            \"conditionalPerfect\": dashOnEmptyInput(condPerfInput)\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n            fetchAddCard(\"Norwegian\", cardObj).then(data => {\r\n                if (data === \"DB_ERR\") {\r\n                    console.log(\"db err\");\r\n                } else if (data === \"MISSING_WORD_PASSED\") {\r\n                    console.log(\"missing word\");\r\n                } else {\r\n                    console.log(\"OK!\")\r\n                }\r\n            }).catch((error) => {\r\n                console.error(\"Error: \", error);\r\n            })\r\n        } else {\r\n            setValidated(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Form onSubmit={addCard} noValidate validated={validated}>\r\n            <Form.Group as={Row} className=\"mb-2\">\r\n                <Form.Label column sm=\"2\">\r\n                    Word\r\n                </Form.Label>\r\n                <Col sm={10}>\r\n                    <Form.Control ref={wordInput} required type=\"text\" placeholder=\"Type here\" />\r\n                </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row} className=\"mb-2\">\r\n                <Form.Label column sm=\"2\">\r\n                    Pronounciation\r\n                </Form.Label>\r\n                <Col sm={10}>\r\n                    <Form.Control ref={pronInput} required type=\"text\" placeholder=\"Type here\" />\r\n                </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row} className=\"mb-2\">\r\n                <Form.Label column sm=\"2\">\r\n                    Meaning\r\n                </Form.Label>\r\n                <Col sm={10}>\r\n                    <Form.Control ref={meanInput} required type=\"text\" placeholder=\"Type here\" />\r\n                </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row} className=\"mb-2\">\r\n                <Form.Label column sm=\"2\">\r\n                    Infinitive\r\n                </Form.Label>\r\n                <Col sm={10}>\r\n                    <Form.Control ref={infinitiveInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\r\n                </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row} className=\"mb-2\">\r\n                <Form.Label column sm=\"2\">\r\n                    Present\r\n                </Form.Label>\r\n                <Col sm={10}>\r\n                    <Form.Control ref={presentInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\r\n                </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row} className=\"mb-2\">\r\n                <Form.Label column sm=\"2\">\r\n                    Past\r\n                </Form.Label>\r\n                <Col sm={10}>\r\n                    <Form.Control ref={pastInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\r\n                </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row} className=\"mb-2\">\r\n                <Form.Label column sm=\"2\">\r\n                    Future\r\n                </Form.Label>\r\n                <Col sm={10}>\r\n                    <Form.Control ref={futureInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\r\n                </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row} className=\"mb-2\">\r\n                <Form.Label column sm=\"2\">\r\n                    Conditional\r\n                </Form.Label>\r\n                <Col sm={10}>\r\n                    <Form.Control ref={condInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\r\n                </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row} className=\"mb-2\">\r\n                <Form.Label column sm=\"2\">\r\n                    Imperative\r\n                </Form.Label>\r\n                <Col sm={10}>\r\n                    <Form.Control ref={imperInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\r\n                </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row} className=\"mb-2\">\r\n                <Form.Label column sm=\"2\">\r\n                    Present Perfect\r\n                </Form.Label>\r\n                <Col sm={10}>\r\n                    <Form.Control ref={presPerfInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\r\n                </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row} className=\"mb-2\">\r\n                <Form.Label column sm=\"2\">\r\n                    Past Perfect\r\n                </Form.Label>\r\n                <Col sm={10}>\r\n                    <Form.Control ref={pastPerfInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\r\n                </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row} className=\"mb-2\">\r\n                <Form.Label column sm=\"2\">\r\n                    Future Perfect\r\n                </Form.Label>\r\n                <Col sm={10}>\r\n                    <Form.Control ref={futurePerfInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\r\n                </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row} className=\"mb-2\">\r\n                <Form.Label column sm=\"2\">\r\n                    Conditional Perfect\r\n                </Form.Label>\r\n                <Col sm={10}>\r\n                    <Form.Control ref={condPerfInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\r\n                </Col>\r\n            </Form.Group>\r\n            <Button variant=\"success\" type=\"submit\">\r\n                Add Card\r\n            </Button>\r\n        </Form>\r\n    );\r\n}\r\n\r\nexport default NorwegianAddVerb;","import NorwegianAddAdjective from './NorwegianAddAdjective.jsx'\r\nimport NorwegianAddNoun from './NorwegianAddNoun.jsx'\r\nimport NorwegianAddVerb from './NorwegianAddVerb.jsx'\r\n\r\nfunction NorwegianAddAbstract({speech}) {\r\n\r\n    let result;\r\n\r\n    switch (speech) {\r\n        case \"Adjective\": result = <NorwegianAddAdjective />; break;\r\n        case \"Noun\": result = <NorwegianAddNoun />; break;\r\n        case \"Verb\": result = <NorwegianAddVerb />; break;\r\n        default: result = <div>NULL</div>; break;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            { result }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default NorwegianAddAbstract;","// import DutchAddAbstract from './dutch/DutchAddAbstract.jxs';\r\nimport NorwegianAddAbstract from './norwegian/NorwegianAddAbstract.jsx';\r\n\r\nfunction AddCardAbstractForm({langSelected, grammarSelected}) {\r\n\r\n    let result;\r\n\r\n    switch(langSelected) {\r\n        case \"Dutch\": result = <div>Dutch here</div>; break;\r\n        case \"Norwegian\": result = <NorwegianAddAbstract speech={grammarSelected}/>; break;\r\n        default: result = <div>NULL</div>; break;\r\n    }\r\n\r\n    return (\r\n        <>\r\n        { result }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddCardAbstractForm;","import Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Form from 'react-bootstrap/Form';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport { useRef, useState } from 'react';\r\nimport React from 'react';\r\n\r\nimport AddCardAbstractForm from './AddCardAbstractForm.jsx';\r\nimport '../styles/DropdownLiveSearch.css';\r\n\r\nfunction AddCard() {\r\n\r\n    let langs = [{ lang: \"Dutch\", index: 1 }, { lang: \"Norwegian\", index: 2 }];\r\n\r\n    const selectLang = useRef(null);\r\n    const selectSpeech = useRef(null);\r\n\r\n    const [currLang, setCurrLang] = useState(\"Dutch\");\r\n    const [currSpeech, setCurrSpeech] = useState(\"Adjective\");\r\n\r\n    const updateLang = () => {\r\n        setCurrLang(selectLang.current.value);\r\n    }\r\n\r\n    const updateSpeech = () => {\r\n        setCurrSpeech(selectSpeech.current.value);\r\n    }\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Row>\r\n                <Col>\r\n                </Col>\r\n                <Col xs={10}>\r\n                    <InputGroup className=\"mt-2\">\r\n                        <InputGroup.Prepend>\r\n                            <InputGroup.Text>Language:</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <Form.Control className=\"langDropdown\" onChange={() => updateLang()} ref={selectLang} as=\"select\" defaultValue=\"Dutch\">\r\n                            {langs.map((lang) => <option key={lang.index}>{lang.lang}</option>)}\r\n                        </Form.Control>\r\n                        <InputGroup.Prepend>\r\n                            <InputGroup.Text>Part of speech:</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <Form.Control className=\"langDropdown\" onChange={() => updateSpeech()} ref={selectSpeech} as=\"select\" defaultValue=\"Adjective\">\r\n                            <option>Adjective</option>\r\n                            <option>Noun</option>\r\n                            <option>Verb</option>\r\n                        </Form.Control>\r\n                    </InputGroup>\r\n                </Col>\r\n                <Col>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                </Col>\r\n                <Col xs={10} className=\"mt-2\">\r\n                    <AddCardAbstractForm langSelected={currLang} grammarSelected={currSpeech}/>\r\n                </Col>\r\n                <Col>\r\n                </Col>\r\n            </Row>\r\n        </Container >\r\n    )\r\n}\r\n\r\nexport default AddCard;"],"sourceRoot":""}