{"version":3,"sources":["utils/fetchAddCard.js","utils/dashOnEmptyInput.js","components/norwegian/NorwegianAddAdjective.jsx","components/norwegian/NorwegianAddNoun.jsx","components/norwegian/NorwegianAddVerb.jsx","components/norwegian/NorwegianAddAbstract.jsx","components/AddCardAbstractForm.jsx","components/AddCardModal.jsx","components/AddCard.jsx"],"names":["fetchAddCard","lang","cardObj","fetch","method","headers","body","JSON","stringify","then","response","text","dashOnEmptyInput","str","current","value","NorwegianAddAdjective","wordSetter","showModal","useState","validated","setValidated","wordInput","useRef","pronInput","meanInput","mascSinIndefInput","mascSinDefInput","mascPlIndefInput","mascPlDefInput","femSinIndefInput","femSinDefInput","femPlIndefInput","femPlDefInput","neuterSinIndefInput","neuterSinDefInput","neuterPlIndefInput","neuterPlDefInput","comparativeInput","indefSuperlativeInput","defSuperlativeInput","clearForm","Form","onSubmit","event","preventDefault","stopPropagation","currentTarget","checkValidity","data","console","error","catch","noValidate","Group","as","Row","className","Label","column","sm","Col","Control","ref","required","type","placeholder","Button","variant","NorwegianAddNoun","checkedCountable","setCheckedCountable","genderInput","sinDefInput","sinIndefInput","plDefInput","plIndefInput","onClick","style","width","NorwegianAddVerb","infinitiveInput","presentInput","pastInput","futureInput","condInput","imperInput","presPerfInput","pastPerfInput","futurePerfInput","condPerfInput","NorwegianAddAbstract","result","speech","AddCardAbstractForm","langSelected","grammarSelected","AddCardModal","show","addedWord","handleClose","Modal","onHide","Header","closeButton","Title","Body","Footer","AddCard","selectLang","selectSpeech","currLang","setCurrLang","currSpeech","setCurrSpeech","currWord","setCurrWord","shouldShowModal","setShouldShowModal","Container","fluid","xs","InputGroup","Prepend","Text","onChange","defaultValue","index","map"],"mappings":"mOAAaA,G,MAAe,SAACC,EAAMC,GAC/B,OAAOC,MAAM,WAAY,CACrBC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CAAEP,KAAMA,EAAMC,QAASA,MAC7CO,MAAK,SAAAC,GAAQ,OAAIA,EAASC,YCPpBC,EAAmB,SAACC,GAC7B,MAA6B,KAAtBA,EAAIC,QAAQC,MAAe,IAAMF,EAAIC,QAAQC,O,OCqQzCC,MA5Pf,YAA2D,IAA1BC,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,UAEzC,EAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAEMC,EAAYC,iBAAO,MACnBC,EAAYD,iBAAO,MACnBE,EAAYF,iBAAO,MAEnBG,EAAoBH,iBAAO,MAC3BI,EAAkBJ,iBAAO,MACzBK,EAAmBL,iBAAO,MAC1BM,EAAiBN,iBAAO,MAExBO,EAAmBP,iBAAO,MAC1BQ,EAAiBR,iBAAO,MACxBS,EAAkBT,iBAAO,MACzBU,EAAgBV,iBAAO,MAEvBW,EAAsBX,iBAAO,MAC7BY,EAAoBZ,iBAAO,MAC3Ba,EAAqBb,iBAAO,MAC5Bc,EAAmBd,iBAAO,MAE1Be,EAAmBf,iBAAO,MAC1BgB,EAAwBhB,iBAAO,MAC/BiB,EAAsBjB,iBAAO,MAqD7BkB,EAAY,WACdnB,EAAUR,QAAQC,MAAQ,GAC1BS,EAAUV,QAAQC,MAAQ,GAC1BU,EAAUX,QAAQC,MAAQ,GAC1BY,EAAgBb,QAAQC,MAAQ,GAChCW,EAAkBZ,QAAQC,MAAQ,GAClCc,EAAef,QAAQC,MAAQ,GAC/Ba,EAAiBd,QAAQC,MAAQ,GACjCgB,EAAejB,QAAQC,MAAQ,GAC/Be,EAAiBhB,QAAQC,MAAQ,GACjCkB,EAAcnB,QAAQC,MAAQ,GAC9BiB,EAAgBlB,QAAQC,MAAQ,GAChCoB,EAAkBrB,QAAQC,MAAQ,GAClCmB,EAAoBpB,QAAQC,MAAQ,GACpCsB,EAAiBvB,QAAQC,MAAQ,GACjCqB,EAAmBtB,QAAQC,MAAQ,GACnCuB,EAAiBxB,QAAQC,MAAQ,GACjCwB,EAAsBzB,QAAQC,MAAQ,GACtCyB,EAAoB1B,QAAQC,MAAQ,IAGxC,OACI,eAAC2B,EAAA,EAAD,CAAMC,SAzEM,SAACC,GAIb,GAHAA,EAAMC,iBACND,EAAME,mBAEsC,IAAxCF,EAAMG,cAAcC,gBAA0B,CAC9C3B,GAAa,GACbJ,EAAWK,EAAUR,QAAQC,OAC7B,IAAMb,EAAU,CACZ,KAAQoB,EAAUR,QAAQC,MAC1B,YAAe,CACX,CACI,KAAQ,YACR,eAAkBS,EAAUV,QAAQC,MACpC,QAAWU,EAAUX,QAAQC,MAC7B,WAAc,CACV,kBAAqBH,EAAiBc,GACtC,gBAAmBd,EAAiBe,GACpC,iBAAoBf,EAAiBgB,GACrC,eAAkBhB,EAAiBiB,GACnC,iBAAoBjB,EAAiBkB,GACrC,eAAkBlB,EAAiBmB,GACnC,gBAAmBnB,EAAiBoB,GACpC,cAAiBpB,EAAiBqB,GAClC,eAAkBrB,EAAiBsB,GACnC,aAAgBtB,EAAiBuB,GACjC,cAAiBvB,EAAiBwB,GAClC,YAAexB,EAAiByB,GAChC,YAAezB,EAAiB0B,GAChC,iBAAoB1B,EAAiB2B,GACrC,eAAkB3B,EAAiB4B,OAKnDxC,EAAa,YAAaE,GAASO,MAAK,SAAAwC,GACvB,WAATA,GAA8B,wBAATA,GAA2C,wBAATA,EACvDC,QAAQC,MAAMF,GACE,0BAATA,EACPC,QAAQC,MAAM,8DAEdV,IACAvB,QAELkC,OAAM,SAACD,GACND,QAAQC,MAAM,UAAWA,WAG7B9B,GAAa,IA0BQgC,YAAU,EAACjC,UAAWA,EAA/C,UACI,eAACsB,EAAA,EAAKY,MAAN,CAAYC,GAAIC,IAAKC,UAAU,OAA/B,UACI,cAACf,EAAA,EAAKgB,MAAN,CAAYC,QAAM,EAACC,GAAG,IAAtB,kBAGA,cAACC,EAAA,EAAD,CAAKD,GAAI,GAAT,SACI,cAAClB,EAAA,EAAKoB,QAAN,CAAcC,IAAKzC,EAAW0C,UAAQ,EAACC,KAAK,OAAOC,YAAY,mBAGvE,eAACxB,EAAA,EAAKY,MAAN,CAAYC,GAAIC,IAAKC,UAAU,OAA/B,UACI,cAACf,EAAA,EAAKgB,MAAN,CAAYC,QAAM,EAACC,GAAG,IAAtB,4BAGA,cAACC,EAAA,EAAD,CAAKD,GAAI,GAAT,SACI,cAAClB,EAAA,EAAKoB,QAAN,CAAcC,IAAKvC,EAAWwC,UAAQ,EAACC,KAAK,OAAOC,YAAY,mBAGvE,eAACxB,EAAA,EAAKY,MAAN,CAAYC,GAAIC,IAAKC,UAAU,OAA/B,UACI,cAACf,EAAA,EAAKgB,MAAN,CAAYC,QAAM,EAACC,GAAG,IAAtB,qBAGA,cAACC,EAAA,EAAD,CAAKD,GAAI,GAAT,SACI,cAAClB,EAAA,EAAKoB,QAAN,CAAcC,IAAKtC,EAAWuC,UAAQ,EAACC,KAAK,OAAOC,YAAY,mBAGvE,eAACxB,EAAA,EAAKY,MAAN,CAAYC,GAAIC,IAAKC,UAAU,OAA/B,UACI,cAACf,EAAA,EAAKgB,MAAN,CAAYC,QAAM,EAACC,GAAG,IAAtB,2CAGA,cAACC,EAAA,EAAD,CAAKD,GAAI,GAAT,SACI,cAAClB,EAAA,EAAKoB,QAAN,CAAcC,IAAKrC,EAAmB+B,UAAU,eAAeQ,KAAK,OAAOC,YAAY,mBAG/F,eAACxB,EAAA,EAAKY,MAAN,CAAYC,GAAIC,IAAKC,UAAU,OAA/B,UACI,cAACf,EAAA,EAAKgB,MAAN,CAAYC,QAAM,EAACC,GAAG,IAAtB,yCAGA,cAACC,EAAA,EAAD,CAAKD,GAAI,GAAT,SACI,cAAClB,EAAA,EAAKoB,QAAN,CAAcC,IAAKpC,EAAiB8B,UAAU,eAAeQ,KAAK,OAAOC,YAAY,mBAG7F,eAACxB,EAAA,EAAKY,MAAN,CAAYC,GAAIC,IAAKC,UAAU,OAA/B,UACI,cAACf,EAAA,EAAKgB,MAAN,CAAYC,QAAM,EAACC,GAAG,IAAtB,yCAGA,cAACC,EAAA,EAAD,CAAKD,GAAI,GAAT,SACI,cAAClB,EAAA,EAAKoB,QAAN,CAAcC,IAAKnC,EAAkB6B,UAAU,eAAeQ,KAAK,OAAOC,YAAY,mBAG9F,eAACxB,EAAA,EAAKY,MAAN,CAAYC,GAAIC,IAAKC,UAAU,OAA/B,UACI,cAACf,EAAA,EAAKgB,MAAN,CAAYC,QAAM,EAACC,GAAG,IAAtB,uCAGA,cAACC,EAAA,EAAD,CAAKD,GAAI,GAAT,SACI,cAAClB,EAAA,EAAKoB,QAAN,CAAcC,IAAKlC,EAAgB4B,UAAU,eAAeQ,KAAK,OAAOC,YAAY,mBAG5F,eAACxB,EAAA,EAAKY,MAAN,CAAYC,GAAIC,IAAKC,UAAU,OAA/B,UACI,cAACf,EAAA,EAAKgB,MAAN,CAAYC,QAAM,EAACC,GAAG,IAAtB,0CAGA,cAACC,EAAA,EAAD,CAAKD,GAAI,GAAT,SACI,cAAClB,EAAA,EAAKoB,QAAN,CAAcC,IAAKjC,EAAkB2B,UAAU,eAAeQ,KAAK,OAAOC,YAAY,mBAG9F,eAACxB,EAAA,EAAKY,MAAN,CAAYC,GAAIC,IAAKC,UAAU,OAA/B,UACI,cAACf,EAAA,EAAKgB,MAAN,CAAYC,QAAM,EAACC,GAAG,IAAtB,wCAGA,cAACC,EAAA,EAAD,CAAKD,GAAI,GAAT,SACI,cAAClB,EAAA,EAAKoB,QAAN,CAAcC,IAAKhC,EAAgB0B,UAAU,eAAeQ,KAAK,OAAOC,YAAY,mBAG5F,eAACxB,EAAA,EAAKY,MAAN,CAAYC,GAAIC,IAAKC,UAAU,OAA/B,UACI,cAACf,EAAA,EAAKgB,MAAN,CAAYC,QAAM,EAACC,GAAG,IAAtB,wCAGA,cAACC,EAAA,EAAD,CAAKD,GAAI,GAAT,SACI,cAAClB,EAAA,EAAKoB,QAAN,CAAcC,IAAK/B,EAAiByB,UAAU,eAAeQ,KAAK,OAAOC,YAAY,mBAG7F,eAACxB,EAAA,EAAKY,MAAN,CAAYC,GAAIC,IAAKC,UAAU,OAA/B,UACI,cAACf,EAAA,EAAKgB,MAAN,CAAYC,QAAM,EAACC,GAAG,IAAtB,sCAGA,cAACC,EAAA,EAAD,CAAKD,GAAI,GAAT,SACI,cAAClB,EAAA,EAAKoB,QAAN,CAAcC,IAAK9B,EAAewB,UAAU,eAAeQ,KAAK,OAAOC,YAAY,mBAG3F,eAACxB,EAAA,EAAKY,MAAN,CAAYC,GAAIC,IAAKC,UAAU,OAA/B,UACI,cAACf,EAAA,EAAKgB,MAAN,CAAYC,QAAM,EAACC,GAAG,IAAtB,wCAGA,cAACC,EAAA,EAAD,CAAKD,GAAI,GAAT,SACI,cAAClB,EAAA,EAAKoB,QAAN,CAAcC,IAAK7B,EAAqBuB,UAAU,eAAeQ,KAAK,OAAOC,YAAY,mBAGjG,eAACxB,EAAA,EAAKY,MAAN,CAAYC,GAAIC,IAAKC,UAAU,OAA/B,UACI,cAACf,EAAA,EAAKgB,MAAN,CAAYC,QAAM,EAACC,GAAG,IAAtB,sCAGA,cAACC,EAAA,EAAD,CAAKD,GAAI,GAAT,SACI,cAAClB,EAAA,EAAKoB,QAAN,CAAcC,IAAK5B,EAAmBsB,UAAU,eAAeQ,KAAK,OAAOC,YAAY,mBAG/F,eAACxB,EAAA,EAAKY,MAAN,CAAYC,GAAIC,IAAKC,UAAU,OAA/B,UACI,cAACf,EAAA,EAAKgB,MAAN,CAAYC,QAAM,EAACC,GAAG,IAAtB,sCAGA,cAACC,EAAA,EAAD,CAAKD,GAAI,GAAT,SACI,cAAClB,EAAA,EAAKoB,QAAN,CAAcC,IAAK3B,EAAoBqB,UAAU,eAAeQ,KAAK,OAAOC,YAAY,mBAGhG,eAACxB,EAAA,EAAKY,MAAN,CAAYC,GAAIC,IAAKC,UAAU,OAA/B,UACI,cAACf,EAAA,EAAKgB,MAAN,CAAYC,QAAM,EAACC,GAAG,IAAtB,oCAGA,cAACC,EAAA,EAAD,CAAKD,GAAI,GAAT,SACI,cAAClB,EAAA,EAAKoB,QAAN,CAAcC,IAAK1B,EAAkBoB,UAAU,eAAeQ,KAAK,OAAOC,YAAY,mBAG9F,eAACxB,EAAA,EAAKY,MAAN,CAAYC,GAAIC,IAAKC,UAAU,OAA/B,UACI,cAACf,EAAA,EAAKgB,MAAN,CAAYC,QAAM,EAACC,GAAG,IAAtB,yBAGA,cAACC,EAAA,EAAD,CAAKD,GAAI,GAAT,SACI,cAAClB,EAAA,EAAKoB,QAAN,CAAcC,IAAKzB,EAAkBmB,UAAU,eAAeQ,KAAK,OAAOC,YAAY,mBAG9F,eAACxB,EAAA,EAAKY,MAAN,CAAYC,GAAIC,IAAKC,UAAU,OAA/B,UACI,cAACf,EAAA,EAAKgB,MAAN,CAAYC,QAAM,EAACC,GAAG,IAAtB,oCAGA,cAACC,EAAA,EAAD,CAAKD,GAAI,GAAT,SACI,cAAClB,EAAA,EAAKoB,QAAN,CAAcC,IAAKxB,EAAuBkB,UAAU,eAAeQ,KAAK,OAAOC,YAAY,mBAGnG,eAACxB,EAAA,EAAKY,MAAN,CAAYC,GAAIC,IAAKC,UAAU,OAA/B,UACI,cAACf,EAAA,EAAKgB,MAAN,CAAYC,QAAM,EAACC,GAAG,IAAtB,kCAGA,cAACC,EAAA,EAAD,CAAKD,GAAI,GAAT,SACI,cAAClB,EAAA,EAAKoB,QAAN,CAAcC,IAAKvB,EAAqBiB,UAAU,eAAeQ,KAAK,OAAOC,YAAY,mBAGjG,cAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUH,KAAK,SAA/B,0BC9FGI,MAvJf,YAAsD,IAA1BpD,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,UAEpC,EAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAgDF,oBAAS,GAAzD,mBAAOmD,EAAP,KAAyBC,EAAzB,KAEMjD,EAAYC,iBAAO,MACnBC,EAAYD,iBAAO,MACnBiD,EAAcjD,iBAAO,MACrBE,EAAYF,iBAAO,MACnBkD,EAAclD,iBAAO,MACrBmD,EAAgBnD,iBAAO,MACvBoD,EAAapD,iBAAO,MACpBqD,EAAerD,iBAAO,MA4CtBkB,EAAY,WACdnB,EAAUR,QAAQC,MAAQ,GAC1BS,EAAUV,QAAQC,MAAQ,GAC1BU,EAAUX,QAAQC,MAAQ,GAC1B0D,EAAY3D,QAAQC,MAAQ,GAC5B2D,EAAc5D,QAAQC,MAAQ,GAC9B4D,EAAW7D,QAAQC,MAAQ,GAC3B6D,EAAa9D,QAAQC,MAAQ,IAGjC,OACI,eAAC2B,EAAA,EAAD,CAAMC,SArDM,SAACC,GAIb,GAHAA,EAAMC,iBACND,EAAME,mBAEsC,IAAxCF,EAAMG,cAAcC,gBAA0B,CAC9C3B,GAAa,GACbJ,EAAWK,EAAUR,QAAQC,OAC7B,IAAMb,EAAU,CACZ,KAAQoB,EAAUR,QAAQC,MAC1B,YAAe,CACX,CACI,KAAQ,OACR,eAAkBS,EAAUV,QAAQC,MACpC,QAAWU,EAAUX,QAAQC,MAC7B,YAAe,CACX,UAAauD,EACb,OAAUE,EAAY1D,QAAQC,MAC9B,mBAAsBH,EAAiB8D,GACvC,iBAAoB9D,EAAiB6D,GACrC,iBAAoB7D,EAAiBgE,GACrC,eAAkBhE,EAAiB+D,OAKnD3E,EAAa,YAAaE,GAASO,MAAK,SAAAwC,GACvB,WAATA,GAA8B,wBAATA,GAA2C,wBAATA,EACvDC,QAAQC,MAAMF,GACE,0BAATA,EACPC,QAAQC,MAAM,8DAEdV,IACAvB,QAELkC,OAAM,SAACD,GACND,QAAQC,MAAM,UAAWA,WAG7B9B,GAAa,IAeQgC,YAAU,EAACjC,UAAWA,EAA/C,UACI,eAACsB,EAAA,EAAKY,MAAN,CAAYC,GAAIC,IAAKC,UAAU,OAA/B,UACI,cAACf,EAAA,EAAKgB,MAAN,CAAYC,QAAM,EAACC,GAAG,IAAtB,kBAGA,cAACC,EAAA,EAAD,CAAKD,GAAI,GAAT,SACI,cAAClB,EAAA,EAAKoB,QAAN,CAAcC,IAAKzC,EAAW0C,UAAQ,EAACC,KAAK,OAAOC,YAAY,mBAGvE,eAACxB,EAAA,EAAKY,MAAN,CAAYC,GAAIC,IAAKC,UAAU,OAA/B,UACI,cAACf,EAAA,EAAKgB,MAAN,CAAYC,QAAM,EAACC,GAAG,IAAtB,4BAGA,cAACC,EAAA,EAAD,CAAKD,GAAI,GAAT,SACI,cAAClB,EAAA,EAAKoB,QAAN,CAAcC,IAAKvC,EAAWwC,UAAQ,EAACC,KAAK,OAAOC,YAAY,mBAGvE,eAACxB,EAAA,EAAKY,MAAN,CAAYC,GAAIC,IAAKC,UAAU,OAA/B,UACI,cAACf,EAAA,EAAKgB,MAAN,CAAYC,QAAM,EAACC,GAAG,IAAtB,uBAGA,cAACC,EAAA,EAAD,CAAKD,GAAI,GAAT,SACI,cAAClB,EAAA,EAAKoB,QAAN,CAAce,QAAS,kBAAMN,GAAqBD,IAAmBQ,MAAO,CAAEC,MAAO,QAAUd,KAAK,kBAG5G,eAACvB,EAAA,EAAKY,MAAN,CAAYC,GAAIC,IAAKC,UAAU,OAA/B,UACI,cAACf,EAAA,EAAKgB,MAAN,CAAYC,QAAM,EAACC,GAAG,IAAtB,oBAGA,cAACC,EAAA,EAAD,CAAKD,GAAI,GAAT,SACI,eAAClB,EAAA,EAAKoB,QAAN,CAAcC,IAAKS,EAAaR,UAAQ,EAACT,GAAG,SAA5C,UACI,wBAAQxC,MAAM,YAAd,uBACA,wBAAQA,MAAM,WAAd,sBACA,wBAAQA,MAAM,SAAd,4BAIZ,eAAC2B,EAAA,EAAKY,MAAN,CAAYC,GAAIC,IAAKC,UAAU,OAA/B,UACI,cAACf,EAAA,EAAKgB,MAAN,CAAYC,QAAM,EAACC,GAAG,IAAtB,qBAGA,cAACC,EAAA,EAAD,CAAKD,GAAI,GAAT,SACI,cAAClB,EAAA,EAAKoB,QAAN,CAAcC,IAAKtC,EAAWuC,UAAQ,EAACC,KAAK,OAAOC,YAAY,mBAGvE,eAACxB,EAAA,EAAKY,MAAN,CAAYC,GAAIC,IAAKC,UAAU,OAA/B,UACI,cAACf,EAAA,EAAKgB,MAAN,CAAYC,QAAM,EAACC,GAAG,IAAtB,+BAGA,cAACC,EAAA,EAAD,CAAKD,GAAI,GAAT,SACI,cAAClB,EAAA,EAAKoB,QAAN,CAAcC,IAAKU,EAAahB,UAAU,eAAeQ,KAAK,OAAOC,YAAY,mBAGzF,eAACxB,EAAA,EAAKY,MAAN,CAAYC,GAAIC,IAAKC,UAAU,OAA/B,UACI,cAACf,EAAA,EAAKgB,MAAN,CAAYC,QAAM,EAACC,GAAG,IAAtB,iCAGA,cAACC,EAAA,EAAD,CAAKD,GAAI,GAAT,SACI,cAAClB,EAAA,EAAKoB,QAAN,CAAcC,IAAKW,EAAejB,UAAU,eAAeQ,KAAK,OAAOC,YAAY,mBAG3F,eAACxB,EAAA,EAAKY,MAAN,CAAYC,GAAIC,IAAKC,UAAU,OAA/B,UACI,cAACf,EAAA,EAAKgB,MAAN,CAAYC,QAAM,EAACC,GAAG,IAAtB,6BAGA,cAACC,EAAA,EAAD,CAAKD,GAAI,GAAT,SACI,cAAClB,EAAA,EAAKoB,QAAN,CAAcC,IAAKY,EAAYlB,UAAU,eAAeQ,KAAK,OAAOC,YAAY,mBAGxF,eAACxB,EAAA,EAAKY,MAAN,CAAYC,GAAIC,IAAKC,UAAU,OAA/B,UACI,cAACf,EAAA,EAAKgB,MAAN,CAAYC,QAAM,EAACC,GAAG,IAAtB,+BAGA,cAACC,EAAA,EAAD,CAAKD,GAAI,GAAT,SACI,cAAClB,EAAA,EAAKoB,QAAN,CAAcC,IAAKa,EAAcnB,UAAU,eAAeQ,KAAK,OAAOC,YAAY,mBAG1F,cAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUH,KAAK,SAA/B,0BCkDGe,MAlMf,YAAsD,IAA1B/D,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,UAEpC,EAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAEMC,EAAYC,iBAAO,MACnBC,EAAYD,iBAAO,MACnBE,EAAYF,iBAAO,MAEnB0D,EAAkB1D,iBAAO,MACzB2D,EAAe3D,iBAAO,MACtB4D,EAAY5D,iBAAO,MACnB6D,EAAc7D,iBAAO,MACrB8D,EAAY9D,iBAAO,MACnB+D,EAAa/D,iBAAO,MACpBgE,EAAgBhE,iBAAO,MACvBiE,EAAgBjE,iBAAO,MACvBkE,EAAkBlE,iBAAO,MACzBmE,EAAgBnE,iBAAO,MAgDvBkB,EAAY,WACdnB,EAAUR,QAAQC,MAAQ,GAC1BS,EAAUV,QAAQC,MAAQ,GAC1BU,EAAUX,QAAQC,MAAQ,GAC1BkE,EAAgBnE,QAAQC,MAAQ,GAChCmE,EAAapE,QAAQC,MAAQ,GAC7BoE,EAAUrE,QAAQC,MAAQ,GAC1BqE,EAAYtE,QAAQC,MAAQ,GAC5BsE,EAAUvE,QAAQC,MAAQ,GAC1BuE,EAAWxE,QAAQC,MAAQ,GAC3BwE,EAAczE,QAAQC,MAAQ,GAC9ByE,EAAc1E,QAAQC,MAAQ,GAC9B0E,EAAgB3E,QAAQC,MAAQ,GAChCyE,EAAc1E,QAAQC,MAAQ,IAGlC,OACI,eAAC2B,EAAA,EAAD,CAAMC,SA/DM,SAACC,GAIb,GAHAA,EAAMC,iBACND,EAAME,mBAEsC,IAAxCF,EAAMG,cAAcC,gBAA0B,CAC9C3B,GAAa,GACbJ,EAAWK,EAAUR,QAAQC,OAC7B,IAAMb,EAAU,CACZ,KAAQoB,EAAUR,QAAQC,MAC1B,YAAe,CACX,CACI,KAAQ,OACR,eAAkBS,EAAUV,QAAQC,MACpC,QAAWU,EAAUX,QAAQC,MAC7B,YAAe,CACX,WAAcH,EAAiBqE,GAC/B,QAAWrE,EAAiBsE,GAC5B,KAAQtE,EAAiBuE,GACzB,OAAUvE,EAAiBwE,GAC3B,YAAexE,EAAiByE,GAChC,WAAczE,EAAiB0E,GAC/B,eAAkB1E,EAAiB2E,GACnC,YAAe3E,EAAiB4E,GAChC,cAAiB5E,EAAiB6E,GAClC,mBAAsB7E,EAAiB8E,OAKvD1F,EAAa,YAAaE,GAASO,MAAK,SAAAwC,GACvB,WAATA,GAA8B,wBAATA,GAA2C,wBAATA,EACvDC,QAAQC,MAAMF,GACE,0BAATA,EACPC,QAAQC,MAAM,8DAEdV,IACAvB,QAELkC,OAAM,SAACD,GACND,QAAQC,MAAM,UAAWA,WAG7B9B,GAAa,IAqBQgC,YAAU,EAACjC,UAAWA,EAA/C,UACI,eAACsB,EAAA,EAAKY,MAAN,CAAYC,GAAIC,IAAKC,UAAU,OAA/B,UACI,cAACf,EAAA,EAAKgB,MAAN,CAAYC,QAAM,EAACC,GAAG,IAAtB,kBAGA,cAACC,EAAA,EAAD,CAAKD,GAAI,GAAT,SACI,cAAClB,EAAA,EAAKoB,QAAN,CAAcC,IAAKzC,EAAW0C,UAAQ,EAACC,KAAK,OAAOC,YAAY,mBAGvE,eAACxB,EAAA,EAAKY,MAAN,CAAYC,GAAIC,IAAKC,UAAU,OAA/B,UACI,cAACf,EAAA,EAAKgB,MAAN,CAAYC,QAAM,EAACC,GAAG,IAAtB,4BAGA,cAACC,EAAA,EAAD,CAAKD,GAAI,GAAT,SACI,cAAClB,EAAA,EAAKoB,QAAN,CAAcC,IAAKvC,EAAWwC,UAAQ,EAACC,KAAK,OAAOC,YAAY,mBAGvE,eAACxB,EAAA,EAAKY,MAAN,CAAYC,GAAIC,IAAKC,UAAU,OAA/B,UACI,cAACf,EAAA,EAAKgB,MAAN,CAAYC,QAAM,EAACC,GAAG,IAAtB,qBAGA,cAACC,EAAA,EAAD,CAAKD,GAAI,GAAT,SACI,cAAClB,EAAA,EAAKoB,QAAN,CAAcC,IAAKtC,EAAWuC,UAAQ,EAACC,KAAK,OAAOC,YAAY,mBAGvE,eAACxB,EAAA,EAAKY,MAAN,CAAYC,GAAIC,IAAKC,UAAU,OAA/B,UACI,cAACf,EAAA,EAAKgB,MAAN,CAAYC,QAAM,EAACC,GAAG,IAAtB,wBAGA,cAACC,EAAA,EAAD,CAAKD,GAAI,GAAT,SACI,cAAClB,EAAA,EAAKoB,QAAN,CAAcC,IAAKkB,EAAiBxB,UAAU,eAAeQ,KAAK,OAAOC,YAAY,mBAG7F,eAACxB,EAAA,EAAKY,MAAN,CAAYC,GAAIC,IAAKC,UAAU,OAA/B,UACI,cAACf,EAAA,EAAKgB,MAAN,CAAYC,QAAM,EAACC,GAAG,IAAtB,qBAGA,cAACC,EAAA,EAAD,CAAKD,GAAI,GAAT,SACI,cAAClB,EAAA,EAAKoB,QAAN,CAAcC,IAAKmB,EAAczB,UAAU,eAAeQ,KAAK,OAAOC,YAAY,mBAG1F,eAACxB,EAAA,EAAKY,MAAN,CAAYC,GAAIC,IAAKC,UAAU,OAA/B,UACI,cAACf,EAAA,EAAKgB,MAAN,CAAYC,QAAM,EAACC,GAAG,IAAtB,kBAGA,cAACC,EAAA,EAAD,CAAKD,GAAI,GAAT,SACI,cAAClB,EAAA,EAAKoB,QAAN,CAAcC,IAAKoB,EAAW1B,UAAU,eAAeQ,KAAK,OAAOC,YAAY,mBAGvF,eAACxB,EAAA,EAAKY,MAAN,CAAYC,GAAIC,IAAKC,UAAU,OAA/B,UACI,cAACf,EAAA,EAAKgB,MAAN,CAAYC,QAAM,EAACC,GAAG,IAAtB,oBAGA,cAACC,EAAA,EAAD,CAAKD,GAAI,GAAT,SACI,cAAClB,EAAA,EAAKoB,QAAN,CAAcC,IAAKqB,EAAa3B,UAAU,eAAeQ,KAAK,OAAOC,YAAY,mBAGzF,eAACxB,EAAA,EAAKY,MAAN,CAAYC,GAAIC,IAAKC,UAAU,OAA/B,UACI,cAACf,EAAA,EAAKgB,MAAN,CAAYC,QAAM,EAACC,GAAG,IAAtB,yBAGA,cAACC,EAAA,EAAD,CAAKD,GAAI,GAAT,SACI,cAAClB,EAAA,EAAKoB,QAAN,CAAcC,IAAKsB,EAAW5B,UAAU,eAAeQ,KAAK,OAAOC,YAAY,mBAGvF,eAACxB,EAAA,EAAKY,MAAN,CAAYC,GAAIC,IAAKC,UAAU,OAA/B,UACI,cAACf,EAAA,EAAKgB,MAAN,CAAYC,QAAM,EAACC,GAAG,IAAtB,wBAGA,cAACC,EAAA,EAAD,CAAKD,GAAI,GAAT,SACI,cAAClB,EAAA,EAAKoB,QAAN,CAAcC,IAAKuB,EAAY7B,UAAU,eAAeQ,KAAK,OAAOC,YAAY,mBAGxF,eAACxB,EAAA,EAAKY,MAAN,CAAYC,GAAIC,IAAKC,UAAU,OAA/B,UACI,cAACf,EAAA,EAAKgB,MAAN,CAAYC,QAAM,EAACC,GAAG,IAAtB,6BAGA,cAACC,EAAA,EAAD,CAAKD,GAAI,GAAT,SACI,cAAClB,EAAA,EAAKoB,QAAN,CAAcC,IAAKwB,EAAe9B,UAAU,eAAeQ,KAAK,OAAOC,YAAY,mBAG3F,eAACxB,EAAA,EAAKY,MAAN,CAAYC,GAAIC,IAAKC,UAAU,OAA/B,UACI,cAACf,EAAA,EAAKgB,MAAN,CAAYC,QAAM,EAACC,GAAG,IAAtB,0BAGA,cAACC,EAAA,EAAD,CAAKD,GAAI,GAAT,SACI,cAAClB,EAAA,EAAKoB,QAAN,CAAcC,IAAKyB,EAAe/B,UAAU,eAAeQ,KAAK,OAAOC,YAAY,mBAG3F,eAACxB,EAAA,EAAKY,MAAN,CAAYC,GAAIC,IAAKC,UAAU,OAA/B,UACI,cAACf,EAAA,EAAKgB,MAAN,CAAYC,QAAM,EAACC,GAAG,IAAtB,4BAGA,cAACC,EAAA,EAAD,CAAKD,GAAI,GAAT,SACI,cAAClB,EAAA,EAAKoB,QAAN,CAAcC,IAAK0B,EAAiBhC,UAAU,eAAeQ,KAAK,OAAOC,YAAY,mBAG7F,eAACxB,EAAA,EAAKY,MAAN,CAAYC,GAAIC,IAAKC,UAAU,OAA/B,UACI,cAACf,EAAA,EAAKgB,MAAN,CAAYC,QAAM,EAACC,GAAG,IAAtB,iCAGA,cAACC,EAAA,EAAD,CAAKD,GAAI,GAAT,SACI,cAAClB,EAAA,EAAKoB,QAAN,CAAcC,IAAK2B,EAAejC,UAAU,eAAeQ,KAAK,OAAOC,YAAY,mBAG3F,cAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUH,KAAK,SAA/B,0BC/KG0B,MAlBf,YAAgE,IAExDC,EAFuBC,EAAgC,EAAhCA,OAAQ5E,EAAwB,EAAxBA,WAAYC,EAAY,EAAZA,UAI/C,OAAQ2E,GACJ,IAAK,YAAaD,EAAS,cAAC,EAAD,CAAuB1E,UAAWA,EAAWD,WAAYA,IAAgB,MACpG,IAAK,OAAQ2E,EAAS,cAAC,EAAD,CAAkB1E,UAAWA,EAAWD,WAAYA,IAAe,MACzF,IAAK,OAAQ2E,EAAS,cAAC,EAAD,CAAkB1E,UAAWA,EAAWD,WAAYA,IAAe,MACzF,QAAS2E,EAAS,uCAGtB,OACI,mCACMA,KCGCE,MAjBf,YAAsF,IAE9EF,EAFsBG,EAAuD,EAAvDA,aAAcC,EAAyC,EAAzCA,gBAAiB/E,EAAwB,EAAxBA,WAAYC,EAAY,EAAZA,UAIrE,OAAO6E,GACH,IAAK,QAASH,EAAS,6CAAuB,MAC9C,IAAK,YAAaA,EAAS,cAAC,EAAD,CAAsB1E,UAAWA,EAAWD,WAAYA,EAAY4E,OAAQG,IAAoB,MAC3H,QAASJ,EAAS,uCAGtB,OACI,mCACEA,K,QCIKK,MAhBf,YAAuD,IAAhCC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,UAAWC,EAAc,EAAdA,YACpC,OACI,eAACC,EAAA,EAAD,CAAOH,KAAMA,EAAMI,OAAQF,EAA3B,UACI,cAACC,EAAA,EAAME,OAAP,CAAcC,aAAW,EAAzB,SACI,cAACH,EAAA,EAAMI,MAAP,wCAEJ,eAACJ,EAAA,EAAMK,KAAP,wBAAuBP,EAAvB,wCACA,cAACE,EAAA,EAAMM,OAAP,UACI,cAACxC,EAAA,EAAD,CAAQC,QAAQ,UAAUS,QAASuB,EAAa,cAAY,oBAA5D,yB,MCiEDQ,UAhEf,WAEI,IAEMC,EAAatF,iBAAO,MACpBuF,EAAevF,iBAAO,MAE5B,EAAgCJ,mBAAS,SAAzC,mBAAO4F,EAAP,KAAiBC,EAAjB,KACA,EAAoC7F,mBAAS,aAA7C,mBAAO8F,EAAP,KAAmBC,EAAnB,KACA,EAAgC/F,mBAAS,MAAzC,mBAAOgG,EAAP,KAAiBC,EAAjB,KACA,EAA8CjG,oBAAS,GAAvD,mBAAOkG,EAAP,KAAwBC,EAAxB,KAcA,OACI,eAACC,EAAA,EAAD,CAAWC,OAAK,EAAhB,UACI,eAAChE,EAAA,EAAD,WACI,cAACK,EAAA,EAAD,IAEA,cAACA,EAAA,EAAD,CAAK4D,GAAI,GAAT,SACI,eAACC,EAAA,EAAD,CAAYjE,UAAU,OAAtB,UACI,cAACiE,EAAA,EAAWC,QAAZ,UACI,cAACD,EAAA,EAAWE,KAAZ,0BAEJ,cAAClF,EAAA,EAAKoB,QAAN,CAAcL,UAAU,eAAeoE,SAAU,WArBjEb,EAAYH,EAAW/F,QAAQC,QAqBsDgD,IAAK8C,EAAYtD,GAAG,SAASuE,aAAa,QAA/G,SAhCR,CAAC,CAAE7H,KAAM,QAAS8H,MAAO,GAAK,CAAE9H,KAAM,YAAa8H,MAAO,IAiCvCC,KAAI,SAAC/H,GAAD,OAAU,iCAA0BA,EAAKA,MAAlBA,EAAK8H,YAE3C,cAACL,EAAA,EAAWC,QAAZ,UACI,cAACD,EAAA,EAAWE,KAAZ,gCAEJ,eAAClF,EAAA,EAAKoB,QAAN,CAAcL,UAAU,eAAeoE,SAAU,WAvBjEX,EAAcJ,EAAahG,QAAQC,QAuBoDgD,IAAK+C,EAAcvD,GAAG,SAASuE,aAAa,YAAnH,UACI,+CACA,0CACA,kDAIZ,cAACjE,EAAA,EAAD,OAGJ,eAACL,EAAA,EAAD,WACI,cAACK,EAAA,EAAD,IAEA,cAACA,EAAA,EAAD,CAAK4D,GAAI,GAAIhE,UAAU,OAAvB,SACI,cAAC,EAAD,CAAqBvC,UAlCnB,WACdoG,GAAmB,IAiCoCrG,WAAYmG,EAAarB,aAAcgB,EAAUf,gBAAiBiB,MAEjH,cAACpD,EAAA,EAAD,OAGJ,cAAC,EAAD,CAAcqC,KAAMmB,EAAiBlB,UAAWgB,EAAUf,YAAa,kBAAMkB,GAAmB","file":"static/js/5.ef6353ff.chunk.js","sourcesContent":["export const fetchAddCard = (lang, cardObj) => {\n    return fetch(\"/addCard\", {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ lang: lang, cardObj: cardObj })\n    }).then(response => response.text());\n};","export const dashOnEmptyInput = (str) => {\n    return str.current.value === '' ? '-' : str.current.value\n};","import Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\n\nimport '../../styles/AddCard.css';\nimport { useState, useRef } from 'react';\nimport { fetchAddCard } from '../../utils/fetchAddCard';\nimport { dashOnEmptyInput } from '../../utils/dashOnEmptyInput';\n\nfunction NorwegianAddAdjective({ wordSetter, showModal }) {\n\n    const [validated, setValidated] = useState(false);\n\n    const wordInput = useRef(null);\n    const pronInput = useRef(null);\n    const meanInput = useRef(null);\n\n    const mascSinIndefInput = useRef(null);\n    const mascSinDefInput = useRef(null);\n    const mascPlIndefInput = useRef(null);\n    const mascPlDefInput = useRef(null);\n\n    const femSinIndefInput = useRef(null);\n    const femSinDefInput = useRef(null);\n    const femPlIndefInput = useRef(null);\n    const femPlDefInput = useRef(null);\n\n    const neuterSinIndefInput = useRef(null);\n    const neuterSinDefInput = useRef(null);\n    const neuterPlIndefInput = useRef(null);\n    const neuterPlDefInput = useRef(null);\n\n    const comparativeInput = useRef(null);\n    const indefSuperlativeInput = useRef(null);\n    const defSuperlativeInput = useRef(null);\n\n    const addCard = (event) => {\n        event.preventDefault();\n        event.stopPropagation();\n\n        if (event.currentTarget.checkValidity() === true) {\n            setValidated(false);\n            wordSetter(wordInput.current.value);\n            const cardObj = {\n                \"word\": wordInput.current.value,\n                \"translation\": [\n                    {\n                        \"type\": \"adjective\",\n                        \"pronounciation\": pronInput.current.value,\n                        \"meaning\": meanInput.current.value,\n                        \"grammarAdj\": {\n                            \"masculineSinIndef\": dashOnEmptyInput(mascSinIndefInput),\n                            \"masculineSinDef\": dashOnEmptyInput(mascSinDefInput),\n                            \"masculinePlIndef\": dashOnEmptyInput(mascPlIndefInput),\n                            \"masculinePlDef\": dashOnEmptyInput(mascPlDefInput),\n                            \"feminineSinIndef\": dashOnEmptyInput(femSinIndefInput),\n                            \"feminineSinDef\": dashOnEmptyInput(femSinDefInput),\n                            \"femininePlIndef\": dashOnEmptyInput(femPlIndefInput),\n                            \"femininePlDef\": dashOnEmptyInput(femPlDefInput),\n                            \"neuterSinIndef\": dashOnEmptyInput(neuterSinIndefInput),\n                            \"neuterSinDef\": dashOnEmptyInput(neuterSinDefInput),\n                            \"neuterPlIndef\": dashOnEmptyInput(neuterPlIndefInput),\n                            \"neuterPlDef\": dashOnEmptyInput(neuterPlDefInput),\n                            \"comparative\": dashOnEmptyInput(comparativeInput),\n                            \"indefSuperlative\": dashOnEmptyInput(indefSuperlativeInput),\n                            \"defSuperlative\": dashOnEmptyInput(defSuperlativeInput)\n                        }\n                    }\n                ]\n            }\n            fetchAddCard(\"Norwegian\", cardObj).then(data => {\n                if (data === \"DB_ERR\" || data === \"MISSING_LANG_PASSED\" || data === \"MISSING_WORD_PASSED\") {\n                    console.error(data);\n                } else if (data === \"Internal Server Error\") {\n                    console.error(\"There was a problem with saving your card to the database\");\n                } else  {\n                    clearForm();\n                    showModal();\n                }\n            }).catch((error) => {\n                console.error(\"Error: \", error);\n            })\n        } else {\n            setValidated(true);\n        }\n    };\n\n    const clearForm = () => {\n        wordInput.current.value = '';\n        pronInput.current.value = '';\n        meanInput.current.value = '';\n        mascSinDefInput.current.value = '';\n        mascSinIndefInput.current.value = '';\n        mascPlDefInput.current.value = '';\n        mascPlIndefInput.current.value = '';\n        femSinDefInput.current.value = '';\n        femSinIndefInput.current.value = '';\n        femPlDefInput.current.value = '';\n        femPlIndefInput.current.value = '';\n        neuterSinDefInput.current.value = '';\n        neuterSinIndefInput.current.value = '';\n        neuterPlDefInput.current.value = '';\n        neuterPlIndefInput.current.value = '';\n        comparativeInput.current.value = '';\n        indefSuperlativeInput.current.value = '';\n        defSuperlativeInput.current.value = '';\n    }\n\n    return (\n        <Form onSubmit={addCard} noValidate validated={validated}>\n            <Form.Group as={Row} className=\"mb-2\">\n                <Form.Label column sm=\"2\">\n                    Word\n                </Form.Label>\n                <Col sm={10}>\n                    <Form.Control ref={wordInput} required type=\"text\" placeholder=\"Type here\" />\n                </Col>\n            </Form.Group>\n            <Form.Group as={Row} className=\"mb-2\">\n                <Form.Label column sm=\"2\">\n                    Pronounciation\n                </Form.Label>\n                <Col sm={10}>\n                    <Form.Control ref={pronInput} required type=\"text\" placeholder=\"Type here\" />\n                </Col>\n            </Form.Group>\n            <Form.Group as={Row} className=\"mb-2\">\n                <Form.Label column sm=\"2\">\n                    Meaning\n                </Form.Label>\n                <Col sm={10}>\n                    <Form.Control ref={meanInput} required type=\"text\" placeholder=\"Type here\" />\n                </Col>\n            </Form.Group>\n            <Form.Group as={Row} className=\"mb-2\">\n                <Form.Label column sm=\"2\">\n                    Masculine Singular Indefinite\n                </Form.Label>\n                <Col sm={10}>\n                    <Form.Control ref={mascSinIndefInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\n                </Col>\n            </Form.Group>\n            <Form.Group as={Row} className=\"mb-2\">\n                <Form.Label column sm=\"2\">\n                    Masculine Singular Definite\n                </Form.Label>\n                <Col sm={10}>\n                    <Form.Control ref={mascSinDefInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\n                </Col>\n            </Form.Group>\n            <Form.Group as={Row} className=\"mb-2\">\n                <Form.Label column sm=\"2\">\n                    Masculine Plural Indefinite\n                </Form.Label>\n                <Col sm={10}>\n                    <Form.Control ref={mascPlIndefInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\n                </Col>\n            </Form.Group>\n            <Form.Group as={Row} className=\"mb-2\">\n                <Form.Label column sm=\"2\">\n                    Masculine Plural Definite\n                </Form.Label>\n                <Col sm={10}>\n                    <Form.Control ref={mascPlDefInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\n                </Col>\n            </Form.Group>\n            <Form.Group as={Row} className=\"mb-2\">\n                <Form.Label column sm=\"2\">\n                    Feminine Singular Indefinite\n                </Form.Label>\n                <Col sm={10}>\n                    <Form.Control ref={femSinIndefInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\n                </Col>\n            </Form.Group>\n            <Form.Group as={Row} className=\"mb-2\">\n                <Form.Label column sm=\"2\">\n                    Feminine Singular Definite\n                </Form.Label>\n                <Col sm={10}>\n                    <Form.Control ref={femSinDefInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\n                </Col>\n            </Form.Group>\n            <Form.Group as={Row} className=\"mb-2\">\n                <Form.Label column sm=\"2\">\n                    Feminine Plural Indefinite\n                </Form.Label>\n                <Col sm={10}>\n                    <Form.Control ref={femPlIndefInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\n                </Col>\n            </Form.Group>\n            <Form.Group as={Row} className=\"mb-2\">\n                <Form.Label column sm=\"2\">\n                    Feminine Plural Definite\n                </Form.Label>\n                <Col sm={10}>\n                    <Form.Control ref={femPlDefInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\n                </Col>\n            </Form.Group>\n            <Form.Group as={Row} className=\"mb-2\">\n                <Form.Label column sm=\"2\">\n                    Neuter Singular Indefinite\n                </Form.Label>\n                <Col sm={10}>\n                    <Form.Control ref={neuterSinIndefInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\n                </Col>\n            </Form.Group>\n            <Form.Group as={Row} className=\"mb-2\">\n                <Form.Label column sm=\"2\">\n                    Neuter Singular Definite\n                </Form.Label>\n                <Col sm={10}>\n                    <Form.Control ref={neuterSinDefInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\n                </Col>\n            </Form.Group>\n            <Form.Group as={Row} className=\"mb-2\">\n                <Form.Label column sm=\"2\">\n                    Neuter Plural Indefinite\n                </Form.Label>\n                <Col sm={10}>\n                    <Form.Control ref={neuterPlIndefInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\n                </Col>\n            </Form.Group>\n            <Form.Group as={Row} className=\"mb-2\">\n                <Form.Label column sm=\"2\">\n                    Neuter Plural Definite\n                </Form.Label>\n                <Col sm={10}>\n                    <Form.Control ref={neuterPlDefInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\n                </Col>\n            </Form.Group>\n            <Form.Group as={Row} className=\"mb-2\">\n                <Form.Label column sm=\"2\">\n                    Comparative\n                </Form.Label>\n                <Col sm={10}>\n                    <Form.Control ref={comparativeInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\n                </Col>\n            </Form.Group>\n            <Form.Group as={Row} className=\"mb-2\">\n                <Form.Label column sm=\"2\">\n                    Indefinite Superlative\n                </Form.Label>\n                <Col sm={10}>\n                    <Form.Control ref={indefSuperlativeInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\n                </Col>\n            </Form.Group>\n            <Form.Group as={Row} className=\"mb-2\">\n                <Form.Label column sm=\"2\">\n                    Definite Superlative\n                </Form.Label>\n                <Col sm={10}>\n                    <Form.Control ref={defSuperlativeInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\n                </Col>\n            </Form.Group>\n            <Button variant=\"success\" type=\"submit\">\n                Add Card\n            </Button>\n        </Form>\n    );\n}\n\nexport default NorwegianAddAdjective;","import Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\n\nimport '../../styles/AddCard.css';\nimport { useState, useRef } from 'react';\nimport { fetchAddCard } from '../../utils/fetchAddCard';\nimport { dashOnEmptyInput } from '../../utils/dashOnEmptyInput';\n\nfunction NorwegianAddNoun({ wordSetter, showModal }) {\n\n    const [validated, setValidated] = useState(false);\n    const [checkedCountable, setCheckedCountable] = useState(false);\n\n    const wordInput = useRef(null);\n    const pronInput = useRef(null);\n    const genderInput = useRef(null);\n    const meanInput = useRef(null);\n    const sinDefInput = useRef(null);\n    const sinIndefInput = useRef(null);\n    const plDefInput = useRef(null);\n    const plIndefInput = useRef(null);\n\n    const addCard = (event) => {\n        event.preventDefault();\n        event.stopPropagation();\n\n        if (event.currentTarget.checkValidity() === true) {\n            setValidated(false);\n            wordSetter(wordInput.current.value);\n            const cardObj = {\n                \"word\": wordInput.current.value,\n                \"translation\": [\n                    {\n                        \"type\": \"noun\",\n                        \"pronounciation\": pronInput.current.value,\n                        \"meaning\": meanInput.current.value,\n                        \"grammarNoun\": {\n                            \"countable\": checkedCountable,\n                            \"gender\": genderInput.current.value,\n                            \"singularIndefinite\": dashOnEmptyInput(sinIndefInput),\n                            \"singularDefinite\": dashOnEmptyInput(sinDefInput),\n                            \"pluralIndefinite\": dashOnEmptyInput(plIndefInput),\n                            \"pluralDefinite\": dashOnEmptyInput(plDefInput)\n                        }\n                    }\n                ]\n            }\n            fetchAddCard(\"Norwegian\", cardObj).then(data => {\n                if (data === \"DB_ERR\" || data === \"MISSING_LANG_PASSED\" || data === \"MISSING_WORD_PASSED\") {\n                    console.error(data);\n                } else if (data === \"Internal Server Error\") {\n                    console.error(\"There was a problem with saving your card to the database\");\n                } else  {\n                    clearForm();\n                    showModal();\n                }\n            }).catch((error) => {\n                console.error(\"Error: \", error);\n            })\n        } else {\n            setValidated(true);\n        }\n    };\n\n    const clearForm = () => {\n        wordInput.current.value = '';\n        pronInput.current.value = '';\n        meanInput.current.value = '';\n        sinDefInput.current.value = '';\n        sinIndefInput.current.value = '';\n        plDefInput.current.value = '';\n        plIndefInput.current.value = '';\n    }\n\n    return (\n        <Form onSubmit={addCard} noValidate validated={validated}>\n            <Form.Group as={Row} className=\"mb-2\">\n                <Form.Label column sm=\"2\">\n                    Word\n                </Form.Label>\n                <Col sm={10}>\n                    <Form.Control ref={wordInput} required type=\"text\" placeholder=\"Type here\" />\n                </Col>\n            </Form.Group>\n            <Form.Group as={Row} className=\"mb-2\">\n                <Form.Label column sm=\"2\">\n                    Pronounciation\n                </Form.Label>\n                <Col sm={10}>\n                    <Form.Control ref={pronInput} required type=\"text\" placeholder=\"Type here\" />\n                </Col>\n            </Form.Group>\n            <Form.Group as={Row} className=\"mb-2\">\n                <Form.Label column sm=\"2\">\n                    Countable\n                </Form.Label>\n                <Col sm={10}>\n                    <Form.Control onClick={() => setCheckedCountable(!checkedCountable)} style={{ width: \"auto\" }} type=\"checkbox\" />\n                </Col>\n            </Form.Group>\n            <Form.Group as={Row} className=\"mb-2\">\n                <Form.Label column sm=\"2\">\n                    Gender\n                </Form.Label>\n                <Col sm={10}>\n                    <Form.Control ref={genderInput} required as=\"select\">\n                        <option value=\"masculine\">Masculine</option>\n                        <option value=\"feminine\">Feminine</option>\n                        <option value=\"neuter\">Neuter</option>\n                    </Form.Control>\n                </Col>\n            </Form.Group>\n            <Form.Group as={Row} className=\"mb-2\">\n                <Form.Label column sm=\"2\">\n                    Meaning\n                </Form.Label>\n                <Col sm={10}>\n                    <Form.Control ref={meanInput} required type=\"text\" placeholder=\"Type here\" />\n                </Col>\n            </Form.Group>\n            <Form.Group as={Row} className=\"mb-2\">\n                <Form.Label column sm=\"2\">\n                    Singular Definite\n                </Form.Label>\n                <Col sm={10}>\n                    <Form.Control ref={sinDefInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\n                </Col>\n            </Form.Group>\n            <Form.Group as={Row} className=\"mb-2\">\n                <Form.Label column sm=\"2\">\n                    Singular Indefinite\n                </Form.Label>\n                <Col sm={10}>\n                    <Form.Control ref={sinIndefInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\n                </Col>\n            </Form.Group>\n            <Form.Group as={Row} className=\"mb-2\">\n                <Form.Label column sm=\"2\">\n                    Plural Definite\n                </Form.Label>\n                <Col sm={10}>\n                    <Form.Control ref={plDefInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\n                </Col>\n            </Form.Group>\n            <Form.Group as={Row} className=\"mb-2\">\n                <Form.Label column sm=\"2\">\n                    Plural Indefinite\n                </Form.Label>\n                <Col sm={10}>\n                    <Form.Control ref={plIndefInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\n                </Col>\n            </Form.Group>\n            <Button variant=\"success\" type=\"submit\">\n                Add Card\n            </Button>\n        </Form>\n    );\n}\n\nexport default NorwegianAddNoun;","import Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\n\nimport '../../styles/AddCard.css';\nimport { useState, useRef } from 'react';\nimport { fetchAddCard } from '../../utils/fetchAddCard';\nimport { dashOnEmptyInput } from '../../utils/dashOnEmptyInput';\n\nfunction NorwegianAddVerb({ wordSetter, showModal }) {\n\n    const [validated, setValidated] = useState(false);\n\n    const wordInput = useRef(null);\n    const pronInput = useRef(null);\n    const meanInput = useRef(null);\n\n    const infinitiveInput = useRef(null);\n    const presentInput = useRef(null);\n    const pastInput = useRef(null);\n    const futureInput = useRef(null);\n    const condInput = useRef(null);\n    const imperInput = useRef(null);\n    const presPerfInput = useRef(null);\n    const pastPerfInput = useRef(null);\n    const futurePerfInput = useRef(null);\n    const condPerfInput = useRef(null);\n\n    const addCard = (event) => {\n        event.preventDefault();\n        event.stopPropagation();\n\n        if (event.currentTarget.checkValidity() === true) {\n            setValidated(false);\n            wordSetter(wordInput.current.value);\n            const cardObj = {\n                \"word\": wordInput.current.value,\n                \"translation\": [\n                    {\n                        \"type\": \"verb\",\n                        \"pronounciation\": pronInput.current.value,\n                        \"meaning\": meanInput.current.value,\n                        \"grammarVerb\": {\n                            \"infinitive\": dashOnEmptyInput(infinitiveInput),\n                            \"present\": dashOnEmptyInput(presentInput),\n                            \"past\": dashOnEmptyInput(pastInput),\n                            \"future\": dashOnEmptyInput(futureInput),\n                            \"conditional\": dashOnEmptyInput(condInput),\n                            \"imperative\": dashOnEmptyInput(imperInput),\n                            \"presentPerfect\": dashOnEmptyInput(presPerfInput),\n                            \"pastPerfect\": dashOnEmptyInput(pastPerfInput),\n                            \"futurePerfect\": dashOnEmptyInput(futurePerfInput),\n                            \"conditionalPerfect\": dashOnEmptyInput(condPerfInput)\n                        }\n                    }\n                ]\n            }\n            fetchAddCard(\"Norwegian\", cardObj).then(data => {\n                if (data === \"DB_ERR\" || data === \"MISSING_LANG_PASSED\" || data === \"MISSING_WORD_PASSED\") {\n                    console.error(data);\n                } else if (data === \"Internal Server Error\") {\n                    console.error(\"There was a problem with saving your card to the database\");\n                } else  {\n                    clearForm();\n                    showModal();\n                }\n            }).catch((error) => {\n                console.error(\"Error: \", error);\n            })\n        } else {\n            setValidated(true);\n        }\n    };\n\n    const clearForm = () => {\n        wordInput.current.value = '';\n        pronInput.current.value = '';\n        meanInput.current.value = '';\n        infinitiveInput.current.value = '';\n        presentInput.current.value = '';\n        pastInput.current.value = '';\n        futureInput.current.value = '';\n        condInput.current.value = '';\n        imperInput.current.value = '';\n        presPerfInput.current.value = '';\n        pastPerfInput.current.value = '';\n        futurePerfInput.current.value = '';\n        pastPerfInput.current.value = '';\n    }\n\n    return (\n        <Form onSubmit={addCard} noValidate validated={validated}>\n            <Form.Group as={Row} className=\"mb-2\">\n                <Form.Label column sm=\"2\">\n                    Word\n                </Form.Label>\n                <Col sm={10}>\n                    <Form.Control ref={wordInput} required type=\"text\" placeholder=\"Type here\" />\n                </Col>\n            </Form.Group>\n            <Form.Group as={Row} className=\"mb-2\">\n                <Form.Label column sm=\"2\">\n                    Pronounciation\n                </Form.Label>\n                <Col sm={10}>\n                    <Form.Control ref={pronInput} required type=\"text\" placeholder=\"Type here\" />\n                </Col>\n            </Form.Group>\n            <Form.Group as={Row} className=\"mb-2\">\n                <Form.Label column sm=\"2\">\n                    Meaning\n                </Form.Label>\n                <Col sm={10}>\n                    <Form.Control ref={meanInput} required type=\"text\" placeholder=\"Type here\" />\n                </Col>\n            </Form.Group>\n            <Form.Group as={Row} className=\"mb-2\">\n                <Form.Label column sm=\"2\">\n                    Infinitive\n                </Form.Label>\n                <Col sm={10}>\n                    <Form.Control ref={infinitiveInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\n                </Col>\n            </Form.Group>\n            <Form.Group as={Row} className=\"mb-2\">\n                <Form.Label column sm=\"2\">\n                    Present\n                </Form.Label>\n                <Col sm={10}>\n                    <Form.Control ref={presentInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\n                </Col>\n            </Form.Group>\n            <Form.Group as={Row} className=\"mb-2\">\n                <Form.Label column sm=\"2\">\n                    Past\n                </Form.Label>\n                <Col sm={10}>\n                    <Form.Control ref={pastInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\n                </Col>\n            </Form.Group>\n            <Form.Group as={Row} className=\"mb-2\">\n                <Form.Label column sm=\"2\">\n                    Future\n                </Form.Label>\n                <Col sm={10}>\n                    <Form.Control ref={futureInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\n                </Col>\n            </Form.Group>\n            <Form.Group as={Row} className=\"mb-2\">\n                <Form.Label column sm=\"2\">\n                    Conditional\n                </Form.Label>\n                <Col sm={10}>\n                    <Form.Control ref={condInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\n                </Col>\n            </Form.Group>\n            <Form.Group as={Row} className=\"mb-2\">\n                <Form.Label column sm=\"2\">\n                    Imperative\n                </Form.Label>\n                <Col sm={10}>\n                    <Form.Control ref={imperInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\n                </Col>\n            </Form.Group>\n            <Form.Group as={Row} className=\"mb-2\">\n                <Form.Label column sm=\"2\">\n                    Present Perfect\n                </Form.Label>\n                <Col sm={10}>\n                    <Form.Control ref={presPerfInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\n                </Col>\n            </Form.Group>\n            <Form.Group as={Row} className=\"mb-2\">\n                <Form.Label column sm=\"2\">\n                    Past Perfect\n                </Form.Label>\n                <Col sm={10}>\n                    <Form.Control ref={pastPerfInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\n                </Col>\n            </Form.Group>\n            <Form.Group as={Row} className=\"mb-2\">\n                <Form.Label column sm=\"2\">\n                    Future Perfect\n                </Form.Label>\n                <Col sm={10}>\n                    <Form.Control ref={futurePerfInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\n                </Col>\n            </Form.Group>\n            <Form.Group as={Row} className=\"mb-2\">\n                <Form.Label column sm=\"2\">\n                    Conditional Perfect\n                </Form.Label>\n                <Col sm={10}>\n                    <Form.Control ref={condPerfInput} className=\"dontValidate\" type=\"text\" placeholder=\"Type here\" />\n                </Col>\n            </Form.Group>\n            <Button variant=\"success\" type=\"submit\">\n                Add Card\n            </Button>\n        </Form>\n    );\n}\n\nexport default NorwegianAddVerb;","import NorwegianAddAdjective from './NorwegianAddAdjective.jsx'\nimport NorwegianAddNoun from './NorwegianAddNoun.jsx'\nimport NorwegianAddVerb from './NorwegianAddVerb.jsx'\n\nfunction NorwegianAddAbstract({speech, wordSetter, showModal}) {\n\n    let result;\n\n    switch (speech) {\n        case \"Adjective\": result = <NorwegianAddAdjective showModal={showModal} wordSetter={wordSetter} />; break;\n        case \"Noun\": result = <NorwegianAddNoun showModal={showModal} wordSetter={wordSetter}/>; break;\n        case \"Verb\": result = <NorwegianAddVerb showModal={showModal} wordSetter={wordSetter}/>; break;\n        default: result = <div>NULL</div>; break;\n    }\n\n    return (\n        <>\n            { result }\n        </>\n    )\n}\n\nexport default NorwegianAddAbstract;","// import DutchAddAbstract from './dutch/DutchAddAbstract.jxs';\nimport NorwegianAddAbstract from './norwegian/NorwegianAddAbstract.jsx';\n\nfunction AddCardAbstractForm({langSelected, grammarSelected, wordSetter, showModal}) {\n\n    let result;\n\n    switch(langSelected) {\n        case \"Dutch\": result = <div>Dutch here</div>; break;\n        case \"Norwegian\": result = <NorwegianAddAbstract showModal={showModal} wordSetter={wordSetter} speech={grammarSelected}/>; break;\n        default: result = <div>NULL</div>; break;\n    }\n\n    return (\n        <>\n        { result }\n        </>\n    )\n}\n\nexport default AddCardAbstractForm;","import Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\n\nfunction AddCardModal({show, addedWord, handleClose}) {\n    return (\n        <Modal show={show} onHide={handleClose}>\n            <Modal.Header closeButton>\n                <Modal.Title>Added to the dictionary</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>The word \"{addedWord}\" has been added to the dictionary</Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"success\" onClick={handleClose} data-testid=\"testCloseAddModal\">\n                    Close\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\nexport default AddCardModal;","import Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport { useRef, useState } from 'react';\nimport React from 'react';\n\nimport AddCardAbstractForm from './AddCardAbstractForm.jsx';\nimport AddCardModal from './AddCardModal.jsx';\nimport '../styles/DropdownLiveSearch.css';\n\nfunction AddCard() {\n\n    let langs = [{ lang: \"Dutch\", index: 1 }, { lang: \"Norwegian\", index: 2 }];\n\n    const selectLang = useRef(null);\n    const selectSpeech = useRef(null);\n\n    const [currLang, setCurrLang] = useState(\"Dutch\");\n    const [currSpeech, setCurrSpeech] = useState(\"Adjective\");\n    const [currWord, setCurrWord] = useState(null);\n    const [shouldShowModal, setShouldShowModal] = useState(false);\n\n    const updateLang = () => {\n        setCurrLang(selectLang.current.value);\n    }\n\n    const updateSpeech = () => {\n        setCurrSpeech(selectSpeech.current.value);\n    }\n\n    const showModal = () => {\n        setShouldShowModal(true);\n    }\n\n    return (\n        <Container fluid>\n            <Row>\n                <Col>\n                </Col>\n                <Col xs={10}>\n                    <InputGroup className=\"mt-2\">\n                        <InputGroup.Prepend>\n                            <InputGroup.Text>Language:</InputGroup.Text>\n                        </InputGroup.Prepend>\n                        <Form.Control className=\"langDropdown\" onChange={() => updateLang()} ref={selectLang} as=\"select\" defaultValue=\"Dutch\">\n                            {langs.map((lang) => <option key={lang.index}>{lang.lang}</option>)}\n                        </Form.Control>\n                        <InputGroup.Prepend>\n                            <InputGroup.Text>Part of speech:</InputGroup.Text>\n                        </InputGroup.Prepend>\n                        <Form.Control className=\"langDropdown\" onChange={() => updateSpeech()} ref={selectSpeech} as=\"select\" defaultValue=\"Adjective\">\n                            <option>Adjective</option>\n                            <option>Noun</option>\n                            <option>Verb</option>\n                        </Form.Control>\n                    </InputGroup>\n                </Col>\n                <Col>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                </Col>\n                <Col xs={10} className=\"mt-2\">\n                    <AddCardAbstractForm showModal={showModal} wordSetter={setCurrWord} langSelected={currLang} grammarSelected={currSpeech}/>\n                </Col>\n                <Col>\n                </Col>\n            </Row>\n            <AddCardModal show={shouldShowModal} addedWord={currWord} handleClose={() => setShouldShowModal(false)}/>\n        </Container >\n    )\n}\n\nexport default AddCard;"],"sourceRoot":""}